{"file_contents":{"design_guidelines.md":{"content":"# Real Estate Marketplace Design Guidelines\n\n## Design Approach\n**Reference-Based Approach** inspired by modern real estate platforms like Zillow, Realtor.com, and Airbnb, emphasizing visual appeal and property showcase capabilities.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Deep Blue: 220 85% 25% (trust, professionalism)\n- Clean White: 0 0% 100% (clarity, space)\n\n**Accent Colors:**\n- Success Green: 142 69% 58% (sold properties, positive actions)\n- Warm Gray: 220 9% 46% (secondary text, borders)\n\n**Background Colors:**\n- Light Gray: 220 14% 96% (page backgrounds)\n- Card White: 0 0% 100% (property cards, modals)\n\n### Typography\n**Primary Font:** Inter (Google Fonts)\n- Headlines: 600 weight, larger sizes\n- Body text: 400 weight\n- Labels/UI: 500 weight\n\n### Layout System\n**Spacing Units:** Tailwind units of 2, 4, 6, and 8\n- Consistent padding: p-4, p-6, p-8\n- Margins: m-2, m-4, m-6\n- Gaps: gap-4, gap-6, gap-8\n\n### Component Library\n\n**Navigation:**\n- Clean header with logo, search bar, and user controls\n- Sticky navigation on scroll\n- Mobile-responsive hamburger menu\n\n**Property Cards:**\n- Large property image with overlay price badge\n- Compact info: price, beds/baths, sqft, address\n- Subtle hover elevation effects\n- Status badges (For Sale, Sold, Pending)\n\n**Search & Filters:**\n- Prominent search bar with location autocomplete\n- Expandable filter panels\n- Quick filter chips for common searches\n- Map integration toggle\n\n**Property Details:**\n- Hero image gallery with thumbnails\n- Two-column layout: details left, contact form right\n- Tabbed sections for Description, Features, Neighborhood\n- Agent contact card with photo\n\n**User Interface:**\n- Card-based layouts throughout\n- Generous whitespace\n- Consistent border radius (rounded-lg)\n- Subtle shadows for depth\n\n### Visual Treatments\n**Gradients:**\n- Subtle blue gradient overlays on hero images\n- Property card hover states with gentle gradients\n\n**Interactive Elements:**\n- Property cards: scale(1.02) on hover\n- Buttons: solid primary for CTAs, outline for secondary\n- Form focus states with blue accent borders\n\n## Images\n**Hero Section:**\n- Large banner image showcasing luxury property or city skyline\n- Gradient overlay (220 85% 25% to transparent)\n- Centered search functionality over hero image\n\n**Property Images:**\n- High-quality listing photos in 16:9 aspect ratio\n- Gallery thumbnails in property details\n- Agent profile photos (circular, professional)\n- Neighborhood/location imagery for context\n\n**Icon Usage:**\n- Heroicons for UI elements (search, filters, user actions)\n- Property feature icons (bed, bath, square footage)\n- Map markers and location indicators\n\nThis design emphasizes trust, professionalism, and visual property showcase while maintaining excellent usability for property search and discovery.","size_bytes":2826},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Real Estate Marketplace Platform\n\n## Overview\n\nA modern, full-featured real estate marketplace platform that connects buyers, sellers, and agents. The application provides comprehensive property listing capabilities, advanced search functionality, user management with role-based access control, and real-time communication features. Built with a focus on visual appeal and user experience, inspired by modern platforms like Zillow, Realtor.com, and Airbnb.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript running on Vite for fast development and optimized builds\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, modern UI components\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Design System**: Custom design tokens with CSS variables for theming, following a reference-based approach inspired by modern real estate platforms\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the full stack\n- **Authentication**: Replit Auth integration with session-based authentication using connect-pg-simple for session storage\n- **Authorization**: Role-based access control supporting buyer, seller, agent, and admin roles\n- **Password Security**: bcrypt for password hashing with configurable salt rounds\n- **API Pattern**: RESTful API design with standardized error handling and logging middleware\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless database hosting\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema Design**: \n  - Users table with role-based permissions and profile management\n  - Properties table with comprehensive listing details and agent relationships\n  - Messages table for in-app communication between users\n  - Favorites table for property bookmarking functionality\n  - Sessions table for authentication state management\n\n### Authentication and Authorization\n- **Primary Auth**: Replit Auth with OpenID Connect (OIDC) integration\n- **Session Management**: Secure session storage with PostgreSQL backend\n- **Role-Based Access**: Middleware-based authorization with granular permissions\n- **Security Features**: Password strength validation, secure session configuration with CSRF protection\n\n### Component Architecture\n- **UI Components**: Modular component library built on Radix UI primitives\n- **Property Management**: Comprehensive property card, grid, search, and detail components\n- **Communication**: Contact forms and agent profile components for user interaction\n- **Authentication**: Modal-based authentication flow with social login options\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: Neon PostgreSQL serverless database for scalable data storage\n- **Authentication**: Replit Auth service for OAuth and user management\n- **UI Framework**: Radix UI for accessible, unstyled component primitives\n- **Styling**: Tailwind CSS for utility-first styling approach\n\n### Development Dependencies\n- **Build Tools**: Vite for fast development and optimized production builds\n- **Type Checking**: TypeScript compiler for static type analysis\n- **Database Tools**: Drizzle Kit for database migrations and schema management\n\n### Planned Integrations\n- **Maps**: Google Maps or Mapbox integration for location-based search and property mapping\n- **Media Storage**: Cloud storage solution for property images and virtual tours\n- **Communication**: Email and SMS notification services for alerts and messaging\n- **Payment Processing**: Payment gateway integration for premium features or transactions","size_bytes":3811},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from 'bcrypt';\n\nconst SALT_ROUNDS = 12;\n\nexport class PasswordUtils {\n  /**\n   * Hash a password using bcrypt\n   */\n  static async hashPassword(password: string): Promise<string> {\n    return await bcrypt.hash(password, SALT_ROUNDS);\n  }\n\n  /**\n   * Compare a plain text password with a hashed password\n   */\n  static async comparePassword(password: string, hashedPassword: string): Promise<boolean> {\n    return await bcrypt.compare(password, hashedPassword);\n  }\n\n  /**\n   * Validate password strength\n   */\n  static validatePassword(password: string): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    if (password.length < 8) {\n      errors.push('Password must be at least 8 characters long');\n    }\n    \n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n    \n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n    \n    if (!/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n}","size_bytes":1178},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/middleware.ts":{"content":"// Authorization middleware for role-based access control\nimport type { RequestHandler } from \"express\";\nimport { isAuthenticated } from \"./replitAuth\";\nimport { storage } from \"./storage\";\n\nexport const requireRole = (allowedRoles: string[]): RequestHandler => {\n  return async (req: any, res, next) => {\n    // First ensure user is authenticated\n    isAuthenticated(req, res, async (authErr) => {\n      if (authErr) return;\n      \n      try {\n        // Fetch user role from database (not from claims)\n        const userId = req.user.claims.sub;\n        const dbUser = await storage.getUser(userId);\n        const userRole = dbUser?.role || 'buyer';\n        \n        if (!allowedRoles.includes(userRole)) {\n          return res.status(403).json({ \n            message: \"Insufficient permissions\",\n            required: allowedRoles,\n            current: userRole \n          });\n        }\n        \n        next();\n      } catch (error) {\n        console.error(\"Error checking user role:\", error);\n        res.status(500).json({ message: \"Authorization check failed\" });\n      }\n    });\n  };\n};\n\nexport const requireAgent = requireRole(['agent']);\nexport const requireSeller = requireRole(['seller', 'agent']);\nexport const requireAdmin = requireRole(['admin']);","size_bytes":1262},"server/replitAuth.ts":{"content":"// Replit Auth integration based on blueprint:javascript_log_in_with_replit\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax', // CSRF protection\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, (err: any, user: any) => {\n      if (err) return next(err);\n      if (!user) return res.redirect(\"/api/login\");\n      \n      // Regenerate session ID before establishing login to prevent session fixation\n      req.session.regenerate((sessionErr: any) => {\n        if (sessionErr) return next(sessionErr);\n        \n        // Log in the user on the new session\n        req.logIn(user, (loginErr: any) => {\n          if (loginErr) return next(loginErr);\n          \n          // Save session and redirect\n          req.session.save(() => {\n            res.redirect(\"/\");\n          });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4898},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { requireAgent, requireSeller } from \"./middleware\";\nimport { insertPropertySchema, insertMessageSchema, insertFavoriteSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Replit Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Ensure password is never returned in API responses\n      if (user) {\n        const { ...safeUser } = user;\n        res.json(safeUser);\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Update user profile (protected route)\n  app.patch('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      \n      // Validate input data\n      if (!updates || typeof updates !== 'object') {\n        return res.status(400).json({ message: \"Invalid input data\" });\n      }\n      \n      // Only allow updating certain fields (role changes require admin approval)\n      const allowedFields = ['phone', 'bio'];\n      const filteredUpdates = Object.keys(updates)\n        .filter(key => allowedFields.includes(key))\n        .reduce((obj: any, key) => {\n          // Basic validation\n          if (typeof updates[key] === 'string' || updates[key] === null) {\n            obj[key] = updates[key];\n          }\n          return obj;\n        }, {});\n\n      if (Object.keys(filteredUpdates).length === 0) {\n        return res.status(400).json({ message: \"No valid fields to update\" });\n      }\n\n      const updatedUser = await storage.upsertUser({\n        id: userId,\n        ...filteredUpdates,\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Property routes\n  app.get('/api/properties', async (req, res) => {\n    try {\n      const {\n        status,\n        propertyType,\n        minPrice,\n        maxPrice,\n        minBedrooms,\n        maxBedrooms,\n        minBathrooms,\n        maxBathrooms,\n        location,\n        agentId,\n        limit = '50',\n        offset = '0',\n        sortBy = 'createdAt',\n        sortOrder = 'desc'\n      } = req.query;\n\n      const filters = {\n        status: status as string,\n        propertyType: propertyType as string,\n        minPrice: minPrice ? parseFloat(minPrice as string) : undefined,\n        maxPrice: maxPrice ? parseFloat(maxPrice as string) : undefined,\n        minBedrooms: minBedrooms ? parseInt(minBedrooms as string) : undefined,\n        maxBedrooms: maxBedrooms ? parseInt(maxBedrooms as string) : undefined,\n        minBathrooms: minBathrooms ? parseFloat(minBathrooms as string) : undefined,\n        maxBathrooms: maxBathrooms ? parseFloat(maxBathrooms as string) : undefined,\n        location: location as string,\n        agentId: agentId as string,\n        limit: parseInt(limit as string),\n        offset: parseInt(offset as string),\n        sortBy: sortBy as 'price' | 'bedrooms' | 'squareFootage' | 'createdAt',\n        sortOrder: sortOrder as 'asc' | 'desc'\n      };\n\n      const properties = await storage.getProperties(filters);\n      res.json(properties);\n    } catch (error) {\n      console.error('Error fetching properties:', error);\n      res.status(500).json({ message: 'Failed to fetch properties' });\n    }\n  });\n\n  app.get('/api/properties/:id', async (req, res) => {\n    try {\n      const property = await storage.getProperty(req.params.id);\n      if (!property) {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n      res.json(property);\n    } catch (error) {\n      console.error('Error fetching property:', error);\n      res.status(500).json({ message: 'Failed to fetch property' });\n    }\n  });\n\n  app.get('/api/properties/agent/:agentId', async (req, res) => {\n    try {\n      const properties = await storage.getPropertiesByAgent(req.params.agentId);\n      res.json(properties);\n    } catch (error) {\n      console.error('Error fetching agent properties:', error);\n      res.status(500).json({ message: 'Failed to fetch agent properties' });\n    }\n  });\n\n  app.post('/api/properties', isAuthenticated, requireSeller, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.role !== 'agent' && user.role !== 'seller')) {\n        return res.status(403).json({ message: 'Only agents and sellers can create properties' });\n      }\n\n      const validationResult = insertPropertySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid property data', \n          errors: validationResult.error.errors \n        });\n      }\n\n      const propertyData = {\n        ...validationResult.data,\n        agentId: userId\n      };\n\n      const property = await storage.createProperty(propertyData);\n      res.status(201).json(property);\n    } catch (error) {\n      console.error('Error creating property:', error);\n      res.status(500).json({ message: 'Failed to create property' });\n    }\n  });\n\n  app.put('/api/properties/:id', isAuthenticated, requireSeller, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const property = await storage.getProperty(req.params.id);\n      \n      if (!property) {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n      \n      if (property.agentId !== userId) {\n        return res.status(403).json({ message: 'You can only edit your own properties' });\n      }\n\n      const validationResult = insertPropertySchema.partial().safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid property data', \n          errors: validationResult.error.errors \n        });\n      }\n\n      const updatedProperty = await storage.updateProperty(req.params.id, validationResult.data);\n      if (!updatedProperty) {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n      \n      res.json(updatedProperty);\n    } catch (error) {\n      console.error('Error updating property:', error);\n      res.status(500).json({ message: 'Failed to update property' });\n    }\n  });\n\n  app.delete('/api/properties/:id', isAuthenticated, requireSeller, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const property = await storage.getProperty(req.params.id);\n      \n      if (!property) {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n      \n      if (property.agentId !== userId) {\n        return res.status(403).json({ message: 'You can only delete your own properties' });\n      }\n\n      const deleted = await storage.deleteProperty(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting property:', error);\n      res.status(500).json({ message: 'Failed to delete property' });\n    }\n  });\n\n  // Message routes\n  app.get('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const messages = await storage.getMessagesForUser(userId);\n      res.json(messages);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n      res.status(500).json({ message: 'Failed to fetch messages' });\n    }\n  });\n\n  app.get('/api/messages/property/:propertyId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const property = await storage.getProperty(req.params.propertyId);\n      \n      if (!property) {\n        return res.status(404).json({ message: 'Property not found' });\n      }\n      \n      // Only allow property owner or involved users to see messages\n      const messages = await storage.getMessagesByProperty(req.params.propertyId);\n      const userMessages = messages.filter(msg => \n        msg.senderId === userId || msg.recipientId === userId || property.agentId === userId\n      );\n      \n      res.json(userMessages);\n    } catch (error) {\n      console.error('Error fetching property messages:', error);\n      res.status(500).json({ message: 'Failed to fetch property messages' });\n    }\n  });\n\n  app.get('/api/messages/conversation/:otherUserId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const messages = await storage.getMessagesBetweenUsers(userId, req.params.otherUserId);\n      res.json(messages);\n    } catch (error) {\n      console.error('Error fetching conversation:', error);\n      res.status(500).json({ message: 'Failed to fetch conversation' });\n    }\n  });\n\n  app.post('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const validationResult = insertMessageSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid message data', \n          errors: validationResult.error.errors \n        });\n      }\n\n      const messageData = {\n        ...validationResult.data,\n        senderId: userId\n      };\n\n      const message = await storage.createMessage(messageData);\n      res.status(201).json(message);\n    } catch (error) {\n      console.error('Error creating message:', error);\n      res.status(500).json({ message: 'Failed to create message' });\n    }\n  });\n\n  app.patch('/api/messages/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const message = await storage.getMessage(req.params.id);\n      \n      if (!message) {\n        return res.status(404).json({ message: 'Message not found' });\n      }\n      \n      if (message.recipientId !== userId) {\n        return res.status(403).json({ message: 'You can only mark your own messages as read' });\n      }\n\n      const marked = await storage.markMessageAsRead(req.params.id);\n      if (!marked) {\n        return res.status(404).json({ message: 'Message not found' });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error marking message as read:', error);\n      res.status(500).json({ message: 'Failed to mark message as read' });\n    }\n  });\n\n  // Favorite routes\n  app.get('/api/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const favorites = await storage.getFavoritesByUser(userId);\n      res.json(favorites);\n    } catch (error) {\n      console.error('Error fetching favorites:', error);\n      res.status(500).json({ message: 'Failed to fetch favorites' });\n    }\n  });\n\n  app.post('/api/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const validationResult = insertFavoriteSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid favorite data', \n          errors: validationResult.error.errors \n        });\n      }\n\n      const favoriteData = {\n        ...validationResult.data,\n        userId\n      };\n\n      const favorite = await storage.addFavorite(favoriteData);\n      res.status(201).json(favorite);\n    } catch (error) {\n      console.error('Error adding favorite:', error);\n      res.status(500).json({ message: 'Failed to add favorite' });\n    }\n  });\n\n  app.delete('/api/favorites/:propertyId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const removed = await storage.removeFavorite(userId, req.params.propertyId);\n      \n      if (!removed) {\n        return res.status(404).json({ message: 'Favorite not found' });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error('Error removing favorite:', error);\n      res.status(500).json({ message: 'Failed to remove favorite' });\n    }\n  });\n\n  app.get('/api/favorites/check/:propertyId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const favorite = await storage.getFavorite(userId, req.params.propertyId);\n      res.json({ isFavorite: !!favorite });\n    } catch (error) {\n      console.error('Error checking favorite status:', error);\n      res.status(500).json({ message: 'Failed to check favorite status' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":13111},"server/storage.ts":{"content":"import { \n  users, \n  properties, \n  messages, \n  favorites,\n  type User, \n  type UpsertUser,\n  type Property,\n  type InsertProperty,\n  type Message,\n  type InsertMessage,\n  type Favorite,\n  type InsertFavorite\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, like, gte, lte, desc, asc } from \"drizzle-orm\";\n\n// Storage interface for all real estate marketplace operations\nexport interface IStorage {\n  // User operations (Replit Auth compatible)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  deleteUser(id: string): Promise<boolean>;\n\n  // Property operations\n  getProperty(id: string): Promise<Property | undefined>;\n  getProperties(filters?: PropertyFilters): Promise<Property[]>;\n  getPropertiesByAgent(agentId: string): Promise<Property[]>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  updateProperty(id: string, updates: Partial<InsertProperty>): Promise<Property | undefined>;\n  deleteProperty(id: string): Promise<boolean>;\n\n  // Message operations\n  getMessage(id: string): Promise<Message | undefined>;\n  getMessagesByProperty(propertyId: string): Promise<Message[]>;\n  getMessagesBetweenUsers(senderId: string, recipientId: string): Promise<Message[]>;\n  getMessagesForUser(userId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  markMessageAsRead(id: string): Promise<boolean>;\n  deleteMessage(id: string): Promise<boolean>;\n\n  // Favorite operations\n  getFavorite(userId: string, propertyId: string): Promise<Favorite | undefined>;\n  getFavoritesByUser(userId: string): Promise<Favorite[]>;\n  addFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  removeFavorite(userId: string, propertyId: string): Promise<boolean>;\n}\n\nexport interface PropertyFilters {\n  status?: string;\n  propertyType?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  minBedrooms?: number;\n  maxBedrooms?: number;\n  minBathrooms?: number;\n  maxBathrooms?: number;\n  location?: string;\n  agentId?: string;\n  limit?: number;\n  offset?: number;\n  sortBy?: 'price' | 'bedrooms' | 'squareFootage' | 'createdAt';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Property operations\n  async getProperty(id: string): Promise<Property | undefined> {\n    const [property] = await db.select().from(properties).where(eq(properties.id, id));\n    return property || undefined;\n  }\n\n  async getProperties(filters: PropertyFilters = {}): Promise<Property[]> {\n    // Build where conditions\n    const conditions = [];\n\n    if (filters.status) {\n      conditions.push(eq(properties.status, filters.status));\n    }\n\n    if (filters.propertyType) {\n      conditions.push(eq(properties.propertyType, filters.propertyType));\n    }\n\n    if (filters.minPrice) {\n      conditions.push(gte(properties.price, filters.minPrice.toString()));\n    }\n\n    if (filters.maxPrice) {\n      conditions.push(lte(properties.price, filters.maxPrice.toString()));\n    }\n\n    if (filters.minBedrooms) {\n      conditions.push(gte(properties.bedrooms, filters.minBedrooms));\n    }\n\n    if (filters.maxBedrooms) {\n      conditions.push(lte(properties.bedrooms, filters.maxBedrooms));\n    }\n\n    if (filters.minBathrooms) {\n      conditions.push(gte(properties.bathrooms, filters.minBathrooms.toString()));\n    }\n\n    if (filters.maxBathrooms) {\n      conditions.push(lte(properties.bathrooms, filters.maxBathrooms.toString()));\n    }\n\n    if (filters.location) {\n      conditions.push(like(properties.address, `%${filters.location}%`));\n    }\n\n    if (filters.agentId) {\n      conditions.push(eq(properties.agentId, filters.agentId));\n    }\n\n    // Determine sort column and order\n    const sortColumn = filters.sortBy === 'price' ? properties.price\n                     : filters.sortBy === 'bedrooms' ? properties.bedrooms  \n                     : filters.sortBy === 'squareFootage' ? properties.squareFootage\n                     : properties.createdAt;\n\n    const sortOrder = filters.sortOrder === 'asc' ? asc(sortColumn) : desc(sortColumn);\n\n    // Build query with all conditions at once\n    const baseQuery = db.select().from(properties);\n    \n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    const limit = filters.limit || 50;\n    const offset = filters.offset || 0;\n\n    if (whereClause) {\n      return await baseQuery\n        .where(whereClause)\n        .orderBy(sortOrder)\n        .limit(limit)\n        .offset(offset);\n    } else {\n      return await baseQuery\n        .orderBy(sortOrder)\n        .limit(limit)\n        .offset(offset);\n    }\n  }\n\n  async getPropertiesByAgent(agentId: string): Promise<Property[]> {\n    return await db\n      .select()\n      .from(properties)\n      .where(eq(properties.agentId, agentId))\n      .orderBy(desc(properties.createdAt));\n  }\n\n  async createProperty(insertProperty: InsertProperty): Promise<Property> {\n    const [property] = await db\n      .insert(properties)\n      .values(insertProperty)\n      .returning();\n    return property;\n  }\n\n  async updateProperty(id: string, updates: Partial<InsertProperty>): Promise<Property | undefined> {\n    const [property] = await db\n      .update(properties)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(properties.id, id))\n      .returning();\n    return property || undefined;\n  }\n\n  async deleteProperty(id: string): Promise<boolean> {\n    const result = await db\n      .delete(properties)\n      .where(eq(properties.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Message operations\n  async getMessage(id: string): Promise<Message | undefined> {\n    const [message] = await db.select().from(messages).where(eq(messages.id, id));\n    return message || undefined;\n  }\n\n  async getMessagesByProperty(propertyId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.propertyId, propertyId))\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async getMessagesBetweenUsers(senderId: string, recipientId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(\n        and(\n          eq(messages.senderId, senderId),\n          eq(messages.recipientId, recipientId)\n        )\n      )\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async getMessagesForUser(userId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.recipientId, userId))\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async markMessageAsRead(id: string): Promise<boolean> {\n    const result = await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Favorite operations\n  async getFavorite(userId: string, propertyId: string): Promise<Favorite | undefined> {\n    const [favorite] = await db\n      .select()\n      .from(favorites)\n      .where(\n        and(\n          eq(favorites.userId, userId),\n          eq(favorites.propertyId, propertyId)\n        )\n      );\n    return favorite || undefined;\n  }\n\n  async getFavoritesByUser(userId: string): Promise<Favorite[]> {\n    return await db\n      .select()\n      .from(favorites)\n      .where(eq(favorites.userId, userId))\n      .orderBy(desc(favorites.createdAt));\n  }\n\n  async addFavorite(insertFavorite: InsertFavorite): Promise<Favorite> {\n    // Use ON CONFLICT DO NOTHING to handle duplicate favorites gracefully\n    const [favorite] = await db\n      .insert(favorites)\n      .values(insertFavorite)\n      .onConflictDoNothing()\n      .returning();\n    \n    // If no favorite was returned (due to conflict), fetch the existing one\n    if (!favorite) {\n      const existing = await this.getFavorite(insertFavorite.userId, insertFavorite.propertyId);\n      if (existing) {\n        return existing;\n      }\n      throw new Error('Failed to add favorite');\n    }\n    \n    return favorite;\n  }\n\n  async removeFavorite(userId: string, propertyId: string): Promise<boolean> {\n    const result = await db\n      .delete(favorites)\n      .where(\n        and(\n          eq(favorites.userId, userId),\n          eq(favorites.propertyId, propertyId)\n        )\n      );\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db\n      .delete(users)\n      .where(eq(users.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async deleteMessage(id: string): Promise<boolean> {\n    const result = await db\n      .delete(messages)\n      .where(eq(messages.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":9374},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, unique, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth (REQUIRED)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table with role-based access (Replit Auth compatible)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Additional fields for real estate marketplace\n  role: varchar(\"role\", { enum: [\"buyer\", \"seller\", \"agent\", \"admin\"] }).notNull().default(\"buyer\"),\n  phone: varchar(\"phone\"),\n  bio: text(\"bio\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Properties table for real estate listings\nexport const properties = pgTable(\"properties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  address: text(\"address\").notNull(),\n  price: decimal(\"price\", { precision: 12, scale: 2 }).notNull(),\n  bedrooms: integer(\"bedrooms\").notNull(),\n  bathrooms: decimal(\"bathrooms\", { precision: 3, scale: 1 }).notNull(),\n  squareFootage: integer(\"square_footage\").notNull(),\n  lotSize: text(\"lot_size\"),\n  yearBuilt: integer(\"year_built\"),\n  parkingSpaces: integer(\"parking_spaces\").default(0),\n  propertyType: text(\"property_type\").notNull(), // house, condo, townhouse, apartment, land\n  status: text(\"status\").notNull().default(\"for-sale\"), // for-sale, for-rent, sold, pending\n  images: text(\"images\").array(), // Array of image URLs\n  features: text(\"features\").array(), // Array of feature strings\n  agentId: varchar(\"agent_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages for communication between users and agents\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  propertyId: varchar(\"property_id\").references(() => properties.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  recipientId: varchar(\"recipient_id\").notNull().references(() => users.id),\n  subject: text(\"subject\"),\n  message: text(\"message\").notNull(),\n  inquiryType: text(\"inquiry_type\").default(\"general\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Favorites for users to save properties\nexport const favorites = pgTable(\"favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  propertyId: varchar(\"property_id\").notNull().references(() => properties.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Unique constraint to prevent duplicate favorites\n  uniqueUserProperty: unique().on(table.userId, table.propertyId),\n}));\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  properties: many(properties),\n  sentMessages: many(messages, { relationName: \"sender\" }),\n  receivedMessages: many(messages, { relationName: \"recipient\" }),\n  favorites: many(favorites),\n}));\n\nexport const propertiesRelations = relations(properties, ({ one, many }) => ({\n  agent: one(users, {\n    fields: [properties.agentId],\n    references: [users.id],\n  }),\n  messages: many(messages),\n  favorites: many(favorites),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  property: one(properties, {\n    fields: [messages.propertyId],\n    references: [properties.id],\n  }),\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  recipient: one(users, {\n    fields: [messages.recipientId],\n    references: [users.id],\n    relationName: \"recipient\",\n  }),\n}));\n\nexport const favoritesRelations = relations(favorites, ({ one }) => ({\n  user: one(users, {\n    fields: [favorites.userId],\n    references: [users.id],\n  }),\n  property: one(properties, {\n    fields: [favorites.propertyId],\n    references: [properties.id],\n  }),\n}));\n\n// Zod schemas for validation\n\n// Replit Auth compatible schemas\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n}).extend({\n  role: z.enum([\"buyer\", \"seller\", \"agent\", \"admin\"]).optional(),\n  phone: z.string().optional(),\n  bio: z.string().optional(),\n});\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Type exports for Replit Auth compatibility\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>; // Required for Replit Auth\nexport type InsertUser = Omit<typeof users.$inferInsert, 'id' | 'createdAt' | 'updatedAt'>; // For manual user creation if needed\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Favorite = typeof favorites.$inferSelect;\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;","size_bytes":5987},"client/src/App.tsx":{"content":"// Main App component with Replit Auth integration based on blueprint:javascript_log_in_with_replit\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Properties from \"@/pages/properties\";\nimport ManageProperties from \"@/pages/manage-properties\";\nimport Messages from \"@/pages/messages\";\nimport Favorites from \"@/pages/favorites\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/properties\" component={Properties} />\n          <Route path=\"/manage-properties\" component={ManageProperties} />\n          <Route path=\"/messages\" component={Messages} />\n          <Route path=\"/favorites\" component={Favorites} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppLayout() {\n  const { isAuthenticated } = useAuth();\n\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <TooltipProvider>\n      {isAuthenticated ? (\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1\">\n              <header className=\"flex items-center justify-between p-2 border-b\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              </header>\n              <main className=\"flex-1 overflow-hidden\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n      ) : (\n        <Router />\n      )}\n      <Toaster />\n    </TooltipProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppLayout />\n    </QueryClientProvider>\n  );\n}","size_bytes":2408},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n  --foreground: 220 15% 20%;\n  --border: 220 13% 91%;\n  --card: 0 0% 100%;\n  --card-foreground: 220 15% 20%;\n  --card-border: 220 13% 91%;\n  --sidebar: 220 14% 96%;\n  --sidebar-foreground: 220 15% 20%;\n  --sidebar-border: 220 13% 91%;\n  --sidebar-primary: 220 85% 25%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 220 18% 88%;\n  --sidebar-accent-foreground: 220 15% 25%;\n  --sidebar-ring: 220 85% 25%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 220 15% 20%;\n  --popover-border: 220 13% 91%;\n  --primary: 220 85% 25%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 220 14% 93%;\n  --secondary-foreground: 220 15% 25%;\n  --muted: 220 14% 96%;\n  --muted-foreground: 220 9% 46%;\n  --accent: 220 14% 93%;\n  --accent-foreground: 220 15% 25%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 220 13% 78%;\n  --ring: 220 85% 25%;\n  --chart-1: 220 85% 25%;\n  --chart-2: 142 69% 45%;\n  --chart-3: 200 85% 35%;\n  --chart-4: 280 65% 45%;\n  --chart-5: 20 85% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 2px 4px -1px hsl(220 13% 91% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 4px 6px -1px hsl(220 13% 91% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 8px 10px -1px hsl(220 13% 91% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 6% 9%;\n  --foreground: 220 5% 92%;\n  --border: 220 6% 18%;\n  --card: 220 6% 12%;\n  --card-foreground: 220 5% 92%;\n  --card-border: 220 6% 18%;\n  --sidebar: 220 6% 10%;\n  --sidebar-foreground: 220 5% 92%;\n  --sidebar-border: 220 6% 15%;\n  --sidebar-primary: 220 85% 25%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 220 6% 16%;\n  --sidebar-accent-foreground: 220 5% 92%;\n  --sidebar-ring: 220 85% 35%;\n  --popover: 220 6% 14%;\n  --popover-foreground: 220 5% 92%;\n  --popover-border: 220 6% 20%;\n  --primary: 220 85% 25%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 220 6% 18%;\n  --secondary-foreground: 220 5% 92%;\n  --muted: 220 6% 15%;\n  --muted-foreground: 220 9% 65%;\n  --accent: 220 6% 16%;\n  --accent-foreground: 220 5% 92%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 220 6% 25%;\n  --ring: 220 85% 35%;\n  --chart-1: 220 85% 65%;\n  --chart-2: 142 69% 65%;\n  --chart-3: 200 85% 65%;\n  --chart-4: 280 65% 70%;\n  --chart-5: 20 85% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 6% 5% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 6% 5% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 6% 5% / 0.00), 0px 1px 2px -1px hsl(220 6% 5% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 6% 5% / 0.00), 0px 1px 2px -1px hsl(220 6% 5% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 6% 5% / 0.00), 0px 2px 4px -1px hsl(220 6% 5% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 6% 5% / 0.00), 0px 4px 6px -1px hsl(220 6% 5% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 6% 5% / 0.00), 0px 8px 10px -1px hsl(220 6% 5% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 6% 5% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9745},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AgentProfile.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Star, Phone, Mail, MessageCircle, Award, TrendingUp, Users } from 'lucide-react';\n\nexport interface Agent {\n  id: string;\n  name: string;\n  title: string;\n  photo?: string;\n  phone: string;\n  email: string;\n  bio: string;\n  rating: number;\n  reviewCount: number;\n  yearsExperience: number;\n  propertiesSold: number;\n  specialties: string[];\n  certifications: string[];\n}\n\ninterface AgentProfileProps {\n  agent: Agent;\n  onContact?: (agentId: string, method: 'phone' | 'email' | 'message') => void;\n  onViewListings?: (agentId: string) => void;\n  compact?: boolean;\n}\n\nexport default function AgentProfile({ agent, onContact, onViewListings, compact = false }: AgentProfileProps) {\n  const [isExpanded, setIsExpanded] = useState(!compact);\n\n  const handleContact = (method: 'phone' | 'email' | 'message') => {\n    onContact?.(agent.id, method);\n    console.log(`Contact agent ${agent.id} via ${method}`);\n  };\n\n  const handleViewListings = () => {\n    onViewListings?.(agent.id);\n    console.log(`View listings for agent ${agent.id}`);\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  if (compact) {\n    return (\n      <Card className=\"hover-elevate cursor-pointer\" onClick={() => setIsExpanded(true)} data-testid={`card-agent-${agent.id}`}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={agent.photo} alt={agent.name} />\n              <AvatarFallback>{getInitials(agent.name)}</AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-base truncate\" data-testid={`text-agent-name-${agent.id}`}>\n                {agent.name}\n              </h3>\n              <p className=\"text-sm text-muted-foreground truncate\">{agent.title}</p>\n              <div className=\"flex items-center gap-1 mt-1\">\n                <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                <span className=\"text-sm font-medium\">{agent.rating}</span>\n                <span className=\"text-xs text-muted-foreground\">({agent.reviewCount} reviews)</span>\n              </div>\n            </div>\n\n            <Button size=\"sm\" data-testid={`button-contact-${agent.id}`}>\n              Contact\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"max-w-md\" data-testid={`card-agent-full-${agent.id}`}>\n      <CardHeader className=\"text-center pb-4\">\n        <Avatar className=\"h-24 w-24 mx-auto mb-4\">\n          <AvatarImage src={agent.photo} alt={agent.name} />\n          <AvatarFallback className=\"text-lg\">{getInitials(agent.name)}</AvatarFallback>\n        </Avatar>\n        \n        <div>\n          <h2 className=\"text-xl font-bold\" data-testid={`text-agent-name-full-${agent.id}`}>\n            {agent.name}\n          </h2>\n          <p className=\"text-muted-foreground\">{agent.title}</p>\n          \n          <div className=\"flex items-center justify-center gap-1 mt-2\">\n            <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n            <span className=\"font-medium\">{agent.rating}</span>\n            <span className=\"text-muted-foreground\">({agent.reviewCount} reviews)</span>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-3 gap-4 text-center\">\n          <div>\n            <div className=\"font-semibold text-lg\" data-testid={`text-experience-${agent.id}`}>\n              {agent.yearsExperience}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Years Exp.</div>\n          </div>\n          <div>\n            <div className=\"font-semibold text-lg\" data-testid={`text-properties-sold-${agent.id}`}>\n              {agent.propertiesSold}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Properties Sold</div>\n          </div>\n          <div>\n            <div className=\"font-semibold text-lg\">{agent.reviewCount}</div>\n            <div className=\"text-xs text-muted-foreground\">Reviews</div>\n          </div>\n        </div>\n\n        {/* Bio */}\n        <div>\n          <h3 className=\"font-semibold mb-2\">About</h3>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\">\n            {agent.bio}\n          </p>\n        </div>\n\n        {/* Specialties */}\n        {agent.specialties.length > 0 && (\n          <div>\n            <h3 className=\"font-semibold mb-2\">Specialties</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {agent.specialties.map((specialty, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {specialty}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Certifications */}\n        {agent.certifications.length > 0 && (\n          <div>\n            <h3 className=\"font-semibold mb-2 flex items-center gap-1\">\n              <Award className=\"h-4 w-4\" />\n              Certifications\n            </h3>\n            <div className=\"space-y-1\">\n              {agent.certifications.map((cert, index) => (\n                <div key={index} className=\"text-sm text-muted-foreground\">\n                  • {cert}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Contact Actions */}\n        <div className=\"space-y-3 pt-4 border-t\">\n          <div className=\"grid grid-cols-3 gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleContact('phone')}\n              data-testid={`button-phone-${agent.id}`}\n            >\n              <Phone className=\"h-3 w-3 mr-1\" />\n              Call\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleContact('email')}\n              data-testid={`button-email-${agent.id}`}\n            >\n              <Mail className=\"h-3 w-3 mr-1\" />\n              Email\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleContact('message')}\n              data-testid={`button-message-${agent.id}`}\n            >\n              <MessageCircle className=\"h-3 w-3 mr-1\" />\n              Message\n            </Button>\n          </div>\n          \n          <Button\n            className=\"w-full\"\n            onClick={handleViewListings}\n            data-testid={`button-view-listings-${agent.id}`}\n          >\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            View My Listings\n          </Button>\n        </div>\n\n        {/* Contact Info */}\n        <div className=\"text-center text-sm text-muted-foreground space-y-1 pt-2 border-t\">\n          <div data-testid={`text-phone-${agent.id}`}>{agent.phone}</div>\n          <div data-testid={`text-email-${agent.id}`}>{agent.email}</div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7435},"client/src/components/AuthModal.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Eye, EyeOff, Home } from 'lucide-react';\nimport { SiGoogle, SiApple, SiGithub } from 'react-icons/si';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAuthSuccess?: (user: { id: string; name: string; email: string; role: string }) => void;\n}\n\nexport default function AuthModal({ isOpen, onClose, onAuthSuccess }: AuthModalProps) {\n  const [activeTab, setActiveTab] = useState<'signin' | 'signup'>('signin');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Form states\n  const [signInForm, setSignInForm] = useState({\n    email: '',\n    password: '',\n  });\n  \n  const [signUpForm, setSignUpForm] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: 'buyer',\n  });\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    // Todo: Remove mock functionality - integrate with real authentication\n    console.log('Sign in attempt:', signInForm);\n    \n    // Simulate API call\n    setTimeout(() => {\n      const mockUser = {\n        id: '1',\n        name: 'John Doe',\n        email: signInForm.email,\n        role: 'buyer',\n      };\n      \n      onAuthSuccess?.(mockUser);\n      setIsLoading(false);\n      onClose();\n    }, 1500);\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    // Todo: Remove mock functionality - integrate with real authentication\n    console.log('Sign up attempt:', signUpForm);\n    \n    // Simulate API call\n    setTimeout(() => {\n      const mockUser = {\n        id: '2',\n        name: signUpForm.name,\n        email: signUpForm.email,\n        role: signUpForm.role,\n      };\n      \n      onAuthSuccess?.(mockUser);\n      setIsLoading(false);\n      onClose();\n    }, 1500);\n  };\n\n  const handleSocialAuth = (provider: string) => {\n    console.log(`${provider} authentication triggered`);\n    // Todo: Remove mock functionality - integrate with real OAuth\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <div className=\"h-6 w-6 bg-primary rounded flex items-center justify-center\">\n              <Home className=\"h-3 w-3 text-primary-foreground\" />\n            </div>\n            Welcome to PropertyHub\n          </DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'signin' | 'signup')}>\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"signin\" data-testid=\"tab-signin\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"signin\" className=\"space-y-4\">\n            <form onSubmit={handleSignIn} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"signin-email\">Email</Label>\n                <Input\n                  id=\"signin-email\"\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  value={signInForm.email}\n                  onChange={(e) => setSignInForm(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                  data-testid=\"input-signin-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"signin-password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"signin-password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Your password\"\n                    value={signInForm.password}\n                    onChange={(e) => setSignInForm(prev => ({ ...prev, password: e.target.value }))}\n                    required\n                    data-testid=\"input-signin-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-signin\">\n                {isLoading ? 'Signing In...' : 'Sign In'}\n              </Button>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"signup\" className=\"space-y-4\">\n            <form onSubmit={handleSignUp} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"signup-name\">Full Name</Label>\n                <Input\n                  id=\"signup-name\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={signUpForm.name}\n                  onChange={(e) => setSignUpForm(prev => ({ ...prev, name: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"signup-email\">Email</Label>\n                <Input\n                  id=\"signup-email\"\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  value={signUpForm.email}\n                  onChange={(e) => setSignUpForm(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"role\">I am a</Label>\n                <Select value={signUpForm.role} onValueChange={(value) => setSignUpForm(prev => ({ ...prev, role: value }))}>\n                  <SelectTrigger data-testid=\"select-role\">\n                    <SelectValue placeholder=\"Select your role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"buyer\">Home Buyer</SelectItem>\n                    <SelectItem value=\"seller\">Home Seller</SelectItem>\n                    <SelectItem value=\"agent\">Real Estate Agent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"signup-password\">Password</Label>\n                <Input\n                  id=\"signup-password\"\n                  type=\"password\"\n                  placeholder=\"Create a strong password\"\n                  value={signUpForm.password}\n                  onChange={(e) => setSignUpForm(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                  data-testid=\"input-signup-password\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  placeholder=\"Confirm your password\"\n                  value={signUpForm.confirmPassword}\n                  onChange={(e) => setSignUpForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading} data-testid=\"button-signup\">\n                {isLoading ? 'Creating Account...' : 'Create Account'}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <Separator />\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"bg-background px-2 text-xs text-muted-foreground\">Or continue with</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => handleSocialAuth('Google')}\n              data-testid=\"button-google-auth\"\n            >\n              <SiGoogle className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => handleSocialAuth('Apple')}\n              data-testid=\"button-apple-auth\"\n            >\n              <SiApple className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => handleSocialAuth('GitHub')}\n              data-testid=\"button-github-auth\"\n            >\n              <SiGithub className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"text-xs text-center text-muted-foreground\">\n          By continuing, you agree to our Terms of Service and Privacy Policy.\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9824},"client/src/components/ContactForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Send, Phone, Mail, MessageCircle, Clock } from 'lucide-react';\n\ninterface ContactFormProps {\n  propertyId?: string;\n  propertyTitle?: string;\n  agentName?: string;\n  agentPhoto?: string;\n  agentPhone?: string;\n  agentEmail?: string;\n  onSubmit?: (formData: ContactFormData) => void;\n  className?: string;\n}\n\nexport interface ContactFormData {\n  name: string;\n  email: string;\n  phone: string;\n  inquiryType: string;\n  message: string;\n  preferredContact: string;\n  bestTimeToCall: string;\n}\n\nexport default function ContactForm({\n  propertyId,\n  propertyTitle,\n  agentName = 'Property Agent',\n  agentPhoto,\n  agentPhone,\n  agentEmail,\n  onSubmit,\n  className\n}: ContactFormProps) {\n  const [formData, setFormData] = useState<ContactFormData>({\n    name: '',\n    email: '',\n    phone: '',\n    inquiryType: 'general',\n    message: '',\n    preferredContact: 'email',\n    bestTimeToCall: 'anytime',\n  });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Todo: Remove mock functionality - integrate with real contact system\n    console.log('Contact form submitted:', {\n      ...formData,\n      propertyId,\n      propertyTitle,\n      agentName,\n    });\n\n    // Simulate API call\n    setTimeout(() => {\n      onSubmit?.(formData);\n      setIsSubmitting(false);\n      setIsSubmitted(true);\n\n      // Reset form after success message\n      setTimeout(() => {\n        setIsSubmitted(false);\n        setFormData({\n          name: '',\n          email: '',\n          phone: '',\n          inquiryType: 'general',\n          message: '',\n          preferredContact: 'email',\n          bestTimeToCall: 'anytime',\n        });\n      }, 3000);\n    }, 1500);\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  if (isSubmitted) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"mb-4\">\n            <div className=\"h-12 w-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Send className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <h3 className=\"font-semibold text-lg mb-2\">Message Sent!</h3>\n            <p className=\"text-muted-foreground text-sm\">\n              Thank you for your inquiry. {agentName} will get back to you within 24 hours.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage src={agentPhoto} alt={agentName} />\n            <AvatarFallback>{getInitials(agentName)}</AvatarFallback>\n          </Avatar>\n          <div>\n            <div className=\"font-semibold\">Contact {agentName}</div>\n            {propertyTitle && (\n              <div className=\"text-sm text-muted-foreground font-normal\">\n                About: {propertyTitle}\n              </div>\n            )}\n          </div>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Quick Contact Options */}\n        {(agentPhone || agentEmail) && (\n          <div className=\"flex gap-2 pb-4 border-b\">\n            {agentPhone && (\n              <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" data-testid=\"button-quick-call\">\n                <Phone className=\"h-3 w-3 mr-1\" />\n                Call\n              </Button>\n            )}\n            {agentEmail && (\n              <Button variant=\"outline\" size=\"sm\" className=\"flex-1\" data-testid=\"button-quick-email\">\n                <Mail className=\"h-3 w-3 mr-1\" />\n                Email\n              </Button>\n            )}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Contact Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"contact-name\">Name *</Label>\n              <Input\n                id=\"contact-name\"\n                type=\"text\"\n                placeholder=\"Your full name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                required\n                data-testid=\"input-contact-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"contact-email\">Email *</Label>\n              <Input\n                id=\"contact-email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                required\n                data-testid=\"input-contact-email\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"contact-phone\">Phone</Label>\n            <Input\n              id=\"contact-phone\"\n              type=\"tel\"\n              placeholder=\"(555) 123-4567\"\n              value={formData.phone}\n              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n              data-testid=\"input-contact-phone\"\n            />\n          </div>\n\n          {/* Inquiry Type */}\n          <div>\n            <Label htmlFor=\"inquiry-type\">I'm interested in</Label>\n            <Select value={formData.inquiryType} onValueChange={(value) => setFormData(prev => ({ ...prev, inquiryType: value }))}>\n              <SelectTrigger data-testid=\"select-inquiry-type\">\n                <SelectValue placeholder=\"Select inquiry type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"general\">General Information</SelectItem>\n                <SelectItem value=\"viewing\">Scheduling a Viewing</SelectItem>\n                <SelectItem value=\"price\">Price and Terms</SelectItem>\n                <SelectItem value=\"financing\">Financing Options</SelectItem>\n                <SelectItem value=\"neighborhood\">Neighborhood Info</SelectItem>\n                <SelectItem value=\"similar\">Similar Properties</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Message */}\n          <div>\n            <Label htmlFor=\"contact-message\">Message</Label>\n            <Textarea\n              id=\"contact-message\"\n              placeholder=\"Tell us more about what you're looking for...\"\n              rows={4}\n              value={formData.message}\n              onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n              data-testid=\"textarea-contact-message\"\n            />\n          </div>\n\n          {/* Communication Preferences */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"preferred-contact\">Preferred Contact</Label>\n              <Select value={formData.preferredContact} onValueChange={(value) => setFormData(prev => ({ ...prev, preferredContact: value }))}>\n                <SelectTrigger data-testid=\"select-preferred-contact\">\n                  <SelectValue placeholder=\"How should we contact you?\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"email\">Email</SelectItem>\n                  <SelectItem value=\"phone\">Phone Call</SelectItem>\n                  <SelectItem value=\"text\">Text Message</SelectItem>\n                  <SelectItem value=\"any\">Any Method</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"best-time\">Best Time to Call</Label>\n              <Select value={formData.bestTimeToCall} onValueChange={(value) => setFormData(prev => ({ ...prev, bestTimeToCall: value }))}>\n                <SelectTrigger data-testid=\"select-best-time\">\n                  <SelectValue placeholder=\"When to reach you?\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"anytime\">Anytime</SelectItem>\n                  <SelectItem value=\"morning\">Morning (9 AM - 12 PM)</SelectItem>\n                  <SelectItem value=\"afternoon\">Afternoon (12 PM - 5 PM)</SelectItem>\n                  <SelectItem value=\"evening\">Evening (5 PM - 8 PM)</SelectItem>\n                  <SelectItem value=\"weekends\">Weekends Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isSubmitting}\n            data-testid=\"button-submit-contact\"\n          >\n            {isSubmitting ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Sending Message...\n              </>\n            ) : (\n              <>\n                <Send className=\"h-4 w-4 mr-2\" />\n                Send Message\n              </>\n            )}\n          </Button>\n\n          {/* Response Time Notice */}\n          <div className=\"flex items-center gap-2 text-xs text-muted-foreground justify-center\">\n            <Clock className=\"h-3 w-3\" />\n            Typical response time: within 2 hours\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10100},"client/src/components/Header.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, User, Heart, Menu, X } from 'lucide-react';\nimport { Link } from 'wouter';\n\ninterface HeaderProps {\n  isAuthenticated?: boolean;\n  userRole?: 'buyer' | 'seller' | 'agent' | 'admin';\n  onAuthClick?: () => void;\n}\n\nexport default function Header({ isAuthenticated = false, userRole = 'buyer', onAuthClick }: HeaderProps) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Search triggered:', searchValue);\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\" data-testid=\"link-home\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 bg-primary rounded-md flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-sm\">PH</span>\n              </div>\n              <span className=\"font-bold text-xl text-foreground\">PropertyHub</span>\n            </div>\n          </Link>\n\n          {/* Desktop Search */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n            <form onSubmit={handleSearch} className=\"relative w-full\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search by location, property type...\"\n                className=\"pl-10 pr-4\"\n                value={searchValue}\n                onChange={(e) => setSearchValue(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </form>\n          </div>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/properties\" data-testid=\"link-properties\">\n              <Button variant=\"ghost\" className=\"hover-elevate\">\n                Browse\n              </Button>\n            </Link>\n            \n            {isAuthenticated && userRole === 'agent' && (\n              <Link href=\"/add-property\" data-testid=\"link-add-property\">\n                <Button variant=\"ghost\" className=\"hover-elevate\">\n                  Add Listing\n                </Button>\n              </Link>\n            )}\n            \n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-3\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover-elevate\" data-testid=\"button-favorites\">\n                  <Heart className=\"h-4 w-4\" />\n                </Button>\n                \n                <Badge variant=\"secondary\" className=\"capitalize\">\n                  {userRole}\n                </Badge>\n                \n                <Button variant=\"ghost\" size=\"icon\" className=\"hover-elevate\" data-testid=\"button-profile\">\n                  <User className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"ghost\" onClick={onAuthClick} data-testid=\"button-login\">\n                  Sign In\n                </Button>\n                <Button onClick={onAuthClick} data-testid=\"button-signup\">\n                  Get Started\n                </Button>\n              </div>\n            )}\n          </nav>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden hover-elevate\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMenuOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Search */}\n        <div className=\"md:hidden pb-4\">\n          <form onSubmit={handleSearch} className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search properties...\"\n              className=\"pl-10 pr-4\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              data-testid=\"input-search-mobile\"\n            />\n          </form>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden border-t pb-4\">\n            <nav className=\"flex flex-col space-y-2 pt-4\">\n              <Link href=\"/properties\" data-testid=\"link-properties-mobile\">\n                <Button variant=\"ghost\" className=\"w-full justify-start hover-elevate\">\n                  Browse Properties\n                </Button>\n              </Link>\n              \n              {isAuthenticated && userRole === 'agent' && (\n                <Link href=\"/add-property\" data-testid=\"link-add-property-mobile\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start hover-elevate\">\n                    Add Listing\n                  </Button>\n                </Link>\n              )}\n              \n              {isAuthenticated ? (\n                <>\n                  <Button variant=\"ghost\" className=\"w-full justify-start hover-elevate\" data-testid=\"button-favorites-mobile\">\n                    <Heart className=\"h-4 w-4 mr-2\" />\n                    Favorites\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start hover-elevate\" data-testid=\"button-profile-mobile\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    Profile ({userRole})\n                  </Button>\n                </>\n              ) : (\n                <div className=\"flex flex-col space-y-2\">\n                  <Button variant=\"ghost\" onClick={onAuthClick} className=\"w-full justify-start hover-elevate\" data-testid=\"button-login-mobile\">\n                    Sign In\n                  </Button>\n                  <Button onClick={onAuthClick} className=\"w-full\" data-testid=\"button-signup-mobile\">\n                    Get Started\n                  </Button>\n                </div>\n              )}\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":6637},"client/src/components/HeroSection.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, MapPin, TrendingUp } from 'lucide-react';\nimport heroImage from '@assets/generated_images/luxury_residential_building_hero_7ddcd010.png';\n\ninterface HeroSectionProps {\n  onSearch?: (query: string, location: string) => void;\n}\n\nexport default function HeroSection({ onSearch }: HeroSectionProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [location, setLocation] = useState('');\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Hero search triggered:', { searchQuery, location });\n    onSearch?.(searchQuery, location);\n  };\n\n  // Todo: Remove mock functionality - replace with real stats\n  const stats = [\n    { label: 'Active Listings', value: '15,000+' },\n    { label: 'Cities Covered', value: '200+' },\n    { label: 'Happy Clients', value: '50K+' }\n  ];\n\n  return (\n    <section className=\"relative min-h-[600px] flex items-center justify-center overflow-hidden\">\n      {/* Background Image with Overlay */}\n      <div className=\"absolute inset-0\">\n        <img\n          src={heroImage}\n          alt=\"Luxury residential building\"\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/80 via-primary/60 to-primary/40\" />\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 container mx-auto px-4 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Badge */}\n          <Badge variant=\"secondary\" className=\"mb-6 bg-white/10 border-white/20 text-white backdrop-blur-sm\">\n            <TrendingUp className=\"h-3 w-3 mr-1\" />\n            Most Trusted Real Estate Platform\n          </Badge>\n\n          {/* Headline */}\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n            Find Your Dream\n            <br />\n            <span className=\"text-white/90\">Home Today</span>\n          </h1>\n\n          {/* Subheading */}\n          <p className=\"text-lg md:text-xl text-white/80 mb-8 max-w-2xl mx-auto\">\n            Discover luxury properties, connect with top agents, and make your real estate dreams a reality with our modern marketplace.\n          </p>\n\n          {/* Search Form */}\n          <form onSubmit={handleSearch} className=\"bg-white/95 backdrop-blur-sm rounded-lg p-6 shadow-lg max-w-2xl mx-auto mb-8\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Property type, neighborhood...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"h-12\"\n                  data-testid=\"input-hero-search\"\n                />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"City, state, or ZIP code\"\n                    value={location}\n                    onChange={(e) => setLocation(e.target.value)}\n                    className=\"h-12 pl-10\"\n                    data-testid=\"input-hero-location\"\n                  />\n                </div>\n              </div>\n              <Button type=\"submit\" size=\"lg\" className=\"h-12 px-8\" data-testid=\"button-hero-search\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n          </form>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-lg mx-auto\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"text-2xl md:text-3xl font-bold text-white\" data-testid={`stat-value-${index}`}>\n                  {stat.value}\n                </div>\n                <div className=\"text-white/70 text-sm\" data-testid={`stat-label-${index}`}>\n                  {stat.label}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4421},"client/src/components/PropertyCard.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Heart, MapPin, Bed, Bath, Square, Eye } from 'lucide-react';\n\nexport interface Property {\n  id: string;\n  title: string;\n  address: string;\n  price: number;\n  bedrooms: number;\n  bathrooms: number;\n  squareFootage: number;\n  imageUrl: string;\n  status: 'for-sale' | 'for-rent' | 'sold' | 'pending';\n  isFavorited?: boolean;\n  agentName: string;\n  agentPhoto?: string;\n}\n\ninterface PropertyCardProps {\n  property: Property;\n  onFavoriteToggle?: (propertyId: string) => void;\n  onViewDetails?: (propertyId: string) => void;\n  onContactAgent?: (propertyId: string) => void;\n}\n\nexport default function PropertyCard({ \n  property, \n  onFavoriteToggle, \n  onViewDetails, \n  onContactAgent \n}: PropertyCardProps) {\n  const [isFavorited, setIsFavorited] = useState(property.isFavorited || false);\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsFavorited(!isFavorited);\n    onFavoriteToggle?.(property.id);\n    console.log('Favorite toggled for property:', property.id);\n  };\n\n  const handleViewDetails = () => {\n    onViewDetails?.(property.id);\n    console.log('View details for property:', property.id);\n  };\n\n  const handleContactAgent = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onContactAgent?.(property.id);\n    console.log('Contact agent for property:', property.id);\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getStatusColor = (status: Property['status']) => {\n    switch (status) {\n      case 'for-sale':\n        return 'bg-primary text-primary-foreground';\n      case 'for-rent':\n        return 'bg-chart-2 text-white';\n      case 'sold':\n        return 'bg-muted text-muted-foreground';\n      case 'pending':\n        return 'bg-chart-4 text-white';\n      default:\n        return 'bg-secondary text-secondary-foreground';\n    }\n  };\n\n  const getStatusText = (status: Property['status']) => {\n    switch (status) {\n      case 'for-sale':\n        return 'For Sale';\n      case 'for-rent':\n        return 'For Rent';\n      case 'sold':\n        return 'Sold';\n      case 'pending':\n        return 'Pending';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <Card className=\"group cursor-pointer overflow-hidden hover-elevate transition-all duration-300\" onClick={handleViewDetails} data-testid={`card-property-${property.id}`}>\n      <div className=\"relative\">\n        {/* Property Image */}\n        <div className=\"aspect-[16/9] overflow-hidden\">\n          <img\n            src={property.imageUrl}\n            alt={property.title}\n            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n\n        {/* Overlays */}\n        <div className=\"absolute top-3 left-3 right-3 flex justify-between items-start\">\n          <Badge className={getStatusColor(property.status)} data-testid={`badge-status-${property.id}`}>\n            {getStatusText(property.status)}\n          </Badge>\n          \n          <Button\n            variant=\"secondary\"\n            size=\"icon\"\n            className={`backdrop-blur-sm ${isFavorited ? 'text-red-500' : 'text-muted-foreground'} hover:text-red-500 bg-white/80 hover:bg-white/90`}\n            onClick={handleFavoriteClick}\n            data-testid={`button-favorite-${property.id}`}\n          >\n            <Heart className={`h-4 w-4 ${isFavorited ? 'fill-current' : ''}`} />\n          </Button>\n        </div>\n\n        {/* Price Overlay */}\n        <div className=\"absolute bottom-3 left-3\">\n          <div className=\"bg-white/95 backdrop-blur-sm rounded-md px-3 py-1\">\n            <span className=\"font-bold text-lg text-foreground\" data-testid={`text-price-${property.id}`}>\n              {formatPrice(property.price)}\n            </span>\n            {property.status === 'for-rent' && (\n              <span className=\"text-muted-foreground text-sm\">/month</span>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <CardContent className=\"p-4\">\n        {/* Property Title & Address */}\n        <div className=\"mb-3\">\n          <h3 className=\"font-semibold text-lg mb-1 line-clamp-1\" data-testid={`text-title-${property.id}`}>\n            {property.title}\n          </h3>\n          <div className=\"flex items-center text-muted-foreground text-sm\">\n            <MapPin className=\"h-3 w-3 mr-1\" />\n            <span className=\"line-clamp-1\" data-testid={`text-address-${property.id}`}>\n              {property.address}\n            </span>\n          </div>\n        </div>\n\n        {/* Property Features */}\n        <div className=\"flex items-center gap-4 mb-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-1\" data-testid={`text-bedrooms-${property.id}`}>\n            <Bed className=\"h-3 w-3\" />\n            <span>{property.bedrooms} bed</span>\n          </div>\n          <div className=\"flex items-center gap-1\" data-testid={`text-bathrooms-${property.id}`}>\n            <Bath className=\"h-3 w-3\" />\n            <span>{property.bathrooms} bath</span>\n          </div>\n          <div className=\"flex items-center gap-1\" data-testid={`text-sqft-${property.id}`}>\n            <Square className=\"h-3 w-3\" />\n            <span>{property.squareFootage.toLocaleString()} sqft</span>\n          </div>\n        </div>\n\n        {/* Agent Info & Actions */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {property.agentPhoto && (\n              <img\n                src={property.agentPhoto}\n                alt={property.agentName}\n                className=\"w-6 h-6 rounded-full object-cover\"\n              />\n            )}\n            <span className=\"text-sm text-muted-foreground\" data-testid={`text-agent-${property.id}`}>\n              {property.agentName}\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleViewDetails}\n              data-testid={`button-view-${property.id}`}\n            >\n              <Eye className=\"h-3 w-3 mr-1\" />\n              View\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={handleContactAgent}\n              data-testid={`button-contact-${property.id}`}\n            >\n              Contact\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6763},"client/src/components/PropertyDetails.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Property } from './PropertyCard';\nimport ContactForm from './ContactForm';\nimport AgentProfile from './AgentProfile';\nimport { \n  Heart, \n  Share, \n  MapPin, \n  Bed, \n  Bath, \n  Square, \n  Car, \n  Calendar,\n  Ruler,\n  Home,\n  ChevronLeft,\n  ChevronRight,\n  Eye\n} from 'lucide-react';\n\ninterface PropertyDetailsProps {\n  property: Property & {\n    description: string;\n    features: string[];\n    yearBuilt: number;\n    lotSize: string;\n    parkingSpaces: number;\n    images: string[];\n    agent: {\n      id: string;\n      name: string;\n      title: string;\n      photo?: string;\n      phone: string;\n      email: string;\n      bio: string;\n      rating: number;\n      reviewCount: number;\n      yearsExperience: number;\n      propertiesSold: number;\n      specialties: string[];\n      certifications: string[];\n    };\n    neighborhood: {\n      walkScore: number;\n      schools: Array<{ name: string; rating: number; distance: string }>;\n      amenities: string[];\n    };\n  };\n  onBack?: () => void;\n  onContactAgent?: (propertyId: string) => void;\n  onScheduleViewing?: (propertyId: string) => void;\n}\n\nexport default function PropertyDetails({\n  property,\n  onBack,\n  onContactAgent,\n  onScheduleViewing\n}: PropertyDetailsProps) {\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [isFavorited, setIsFavorited] = useState(property.isFavorited || false);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const handlePreviousImage = () => {\n    setCurrentImageIndex((prev) => \n      prev === 0 ? property.images.length - 1 : prev - 1\n    );\n  };\n\n  const handleNextImage = () => {\n    setCurrentImageIndex((prev) => \n      prev === property.images.length - 1 ? 0 : prev + 1\n    );\n  };\n\n  const handleFavoriteToggle = () => {\n    setIsFavorited(!isFavorited);\n    console.log('Favorite toggled for property:', property.id);\n  };\n\n  const handleShare = () => {\n    console.log('Share property:', property.id);\n  };\n\n  const handleScheduleViewing = () => {\n    onScheduleViewing?.(property.id);\n    console.log('Schedule viewing for property:', property.id);\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getStatusColor = (status: Property['status']) => {\n    switch (status) {\n      case 'for-sale':\n        return 'bg-primary text-primary-foreground';\n      case 'for-rent':\n        return 'bg-chart-2 text-white';\n      case 'sold':\n        return 'bg-muted text-muted-foreground';\n      case 'pending':\n        return 'bg-chart-4 text-white';\n      default:\n        return 'bg-secondary text-secondary-foreground';\n    }\n  };\n\n  const getStatusText = (status: Property['status']) => {\n    switch (status) {\n      case 'for-sale':\n        return 'For Sale';\n      case 'for-rent':\n        return 'For Rent';\n      case 'sold':\n        return 'Sold';\n      case 'pending':\n        return 'Pending';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4 space-y-6\">\n      {/* Back Button */}\n      {onBack && (\n        <Button variant=\"ghost\" onClick={onBack} className=\"mb-4\" data-testid=\"button-back\">\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Back to Search\n        </Button>\n      )}\n\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <Badge className={getStatusColor(property.status)} data-testid=\"badge-property-status\">\n              {getStatusText(property.status)}\n            </Badge>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleFavoriteToggle}\n                className={isFavorited ? 'text-red-500' : ''}\n                data-testid=\"button-favorite-property\"\n              >\n                <Heart className={`h-4 w-4 ${isFavorited ? 'fill-current' : ''}`} />\n              </Button>\n              <Button variant=\"outline\" size=\"icon\" onClick={handleShare} data-testid=\"button-share-property\">\n                <Share className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          <h1 className=\"text-2xl md:text-3xl font-bold mb-2\" data-testid=\"text-property-title\">\n            {property.title}\n          </h1>\n          \n          <div className=\"flex items-center text-muted-foreground mb-4\">\n            <MapPin className=\"h-4 w-4 mr-1\" />\n            <span data-testid=\"text-property-address\">{property.address}</span>\n          </div>\n          \n          <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-property-price\">\n            {formatPrice(property.price)}\n            {property.status === 'for-rent' && (\n              <span className=\"text-lg text-muted-foreground font-normal\">/month</span>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex gap-3\">\n          <Button variant=\"outline\" onClick={handleScheduleViewing} data-testid=\"button-schedule-viewing\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Schedule Viewing\n          </Button>\n          <Button onClick={() => onContactAgent?.(property.id)} data-testid=\"button-contact-agent\">\n            Contact Agent\n          </Button>\n        </div>\n      </div>\n\n      {/* Image Gallery */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"relative aspect-[16/9] overflow-hidden rounded-lg\">\n            <img\n              src={property.images[currentImageIndex]}\n              alt={`${property.title} - Image ${currentImageIndex + 1}`}\n              className=\"w-full h-full object-cover\"\n            />\n            \n            {property.images.length > 1 && (\n              <>\n                <Button\n                  variant=\"secondary\"\n                  size=\"icon\"\n                  className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white/90\"\n                  onClick={handlePreviousImage}\n                  data-testid=\"button-prev-image\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                \n                <Button\n                  variant=\"secondary\"\n                  size=\"icon\"\n                  className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white/90\"\n                  onClick={handleNextImage}\n                  data-testid=\"button-next-image\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n                \n                <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/50 text-white px-3 py-1 rounded-full text-sm\">\n                  {currentImageIndex + 1} / {property.images.length}\n                </div>\n              </>\n            )}\n          </div>\n          \n          {/* Thumbnail Strip */}\n          {property.images.length > 1 && (\n            <div className=\"flex gap-2 p-4 overflow-x-auto\">\n              {property.images.map((image, index) => (\n                <button\n                  key={index}\n                  onClick={() => setCurrentImageIndex(index)}\n                  className={`flex-shrink-0 w-16 h-16 rounded overflow-hidden border-2 ${\n                    index === currentImageIndex ? 'border-primary' : 'border-transparent'\n                  }`}\n                  data-testid={`button-thumbnail-${index}`}\n                >\n                  <img\n                    src={image}\n                    alt={`Thumbnail ${index + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </button>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Key Features */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <Bed className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                  <div className=\"font-semibold\" data-testid=\"text-detail-bedrooms\">{property.bedrooms}</div>\n                  <div className=\"text-sm text-muted-foreground\">Bedrooms</div>\n                </div>\n                <div className=\"text-center\">\n                  <Bath className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                  <div className=\"font-semibold\" data-testid=\"text-detail-bathrooms\">{property.bathrooms}</div>\n                  <div className=\"text-sm text-muted-foreground\">Bathrooms</div>\n                </div>\n                <div className=\"text-center\">\n                  <Square className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                  <div className=\"font-semibold\" data-testid=\"text-detail-sqft\">{property.squareFootage.toLocaleString()}</div>\n                  <div className=\"text-sm text-muted-foreground\">Sq Ft</div>\n                </div>\n                <div className=\"text-center\">\n                  <Car className=\"h-6 w-6 mx-auto mb-2 text-muted-foreground\" />\n                  <div className=\"font-semibold\" data-testid=\"text-detail-parking\">{property.parkingSpaces}</div>\n                  <div className=\"text-sm text-muted-foreground\">Parking</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Info Tabs */}\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"features\" data-testid=\"tab-features\">Features</TabsTrigger>\n              <TabsTrigger value=\"neighborhood\" data-testid=\"tab-neighborhood\">Neighborhood</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Property Description</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-property-description\">\n                    {property.description}\n                  </p>\n                  \n                  <Separator className=\"my-4\" />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Year Built:</span>\n                      <span data-testid=\"text-year-built\">{property.yearBuilt}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Lot Size:</span>\n                      <span data-testid=\"text-lot-size\">{property.lotSize}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Property Type:</span>\n                      <span className=\"capitalize\">House</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Parking:</span>\n                      <span>{property.parkingSpaces} spaces</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"features\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Property Features</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {property.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <div className=\"h-2 w-2 bg-primary rounded-full\" />\n                        <span className=\"text-sm\" data-testid={`text-feature-${index}`}>{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"neighborhood\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Neighborhood Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"font-medium\">Walk Score</span>\n                      <Badge variant=\"secondary\">{property.neighborhood.walkScore}/100</Badge>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {property.neighborhood.walkScore >= 90 ? 'Walker\\'s Paradise' :\n                       property.neighborhood.walkScore >= 70 ? 'Very Walkable' :\n                       property.neighborhood.walkScore >= 50 ? 'Somewhat Walkable' : 'Car-Dependent'}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Nearby Schools</h4>\n                    <div className=\"space-y-2\">\n                      {property.neighborhood.schools.map((school, index) => (\n                        <div key={index} className=\"flex justify-between items-center text-sm\">\n                          <span>{school.name}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\">{school.rating}/10</Badge>\n                            <span className=\"text-muted-foreground\">{school.distance}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Nearby Amenities</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {property.neighborhood.amenities.map((amenity, index) => (\n                        <div key={index} className=\"flex items-center gap-2 text-sm\">\n                          <div className=\"h-2 w-2 bg-chart-2 rounded-full\" />\n                          <span>{amenity}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Agent Contact */}\n          <ContactForm\n            propertyId={property.id}\n            propertyTitle={property.title}\n            agentName={property.agent.name}\n            agentPhoto={property.agent.photo}\n            agentPhone={property.agent.phone}\n            agentEmail={property.agent.email}\n            onSubmit={(formData) => console.log('Contact form submitted:', formData)}\n          />\n\n          {/* Agent Profile */}\n          <AgentProfile\n            agent={property.agent}\n            compact={true}\n            onContact={(agentId, method) => console.log(`Contact agent ${agentId} via ${method}`)}\n            onViewListings={(agentId) => console.log(`View listings for agent ${agentId}`)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16297},"client/src/components/PropertyGrid.tsx":{"content":"import { useState } from 'react';\nimport PropertyCard, { Property } from './PropertyCard';\nimport PropertySearch, { SearchFilters } from './PropertySearch';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronDown, Filter, Grid3X3, List } from 'lucide-react';\n\ninterface PropertyGridProps {\n  properties: Property[];\n  onPropertySelect?: (property: Property) => void;\n  onFavoriteToggle?: (propertyId: string) => void;\n  onContactAgent?: (propertyId: string) => void;\n  showSearch?: boolean;\n  title?: string;\n}\n\nexport default function PropertyGrid({\n  properties,\n  onPropertySelect,\n  onFavoriteToggle,\n  onContactAgent,\n  showSearch = true,\n  title = 'Browse Properties'\n}: PropertyGridProps) {\n  const [filteredProperties, setFilteredProperties] = useState(properties);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sortBy, setSortBy] = useState('newest');\n  const [isSearchExpanded, setIsSearchExpanded] = useState(false);\n\n  const handleSearch = (filters: SearchFilters) => {\n    // Todo: Remove mock functionality - integrate with real search API\n    console.log('Search filters applied:', filters);\n    \n    let filtered = [...properties];\n    \n    // Apply basic filtering (mock implementation)\n    if (filters.query) {\n      filtered = filtered.filter(p => \n        p.title.toLowerCase().includes(filters.query.toLowerCase()) ||\n        p.address.toLowerCase().includes(filters.query.toLowerCase())\n      );\n    }\n    \n    if (filters.location) {\n      filtered = filtered.filter(p => \n        p.address.toLowerCase().includes(filters.location.toLowerCase())\n      );\n    }\n    \n    if (filters.status !== 'any') {\n      filtered = filtered.filter(p => p.status === filters.status);\n    }\n    \n    if (filters.bedrooms !== 'any') {\n      const minBedrooms = parseInt(filters.bedrooms);\n      filtered = filtered.filter(p => p.bedrooms >= minBedrooms);\n    }\n    \n    if (filters.bathrooms !== 'any') {\n      const minBathrooms = parseFloat(filters.bathrooms);\n      filtered = filtered.filter(p => p.bathrooms >= minBathrooms);\n    }\n    \n    // Price range filtering\n    filtered = filtered.filter(p => \n      p.price >= filters.priceRange[0] && p.price <= filters.priceRange[1]\n    );\n    \n    setFilteredProperties(filtered);\n  };\n\n  const handleClearFilters = () => {\n    setFilteredProperties(properties);\n  };\n\n  const handleSort = (sortOption: string) => {\n    setSortBy(sortOption);\n    const sorted = [...filteredProperties];\n    \n    switch (sortOption) {\n      case 'price-low':\n        sorted.sort((a, b) => a.price - b.price);\n        break;\n      case 'price-high':\n        sorted.sort((a, b) => b.price - a.price);\n        break;\n      case 'bedrooms':\n        sorted.sort((a, b) => b.bedrooms - a.bedrooms);\n        break;\n      case 'sqft':\n        sorted.sort((a, b) => b.squareFootage - a.squareFootage);\n        break;\n      case 'newest':\n      default:\n        // Keep original order for newest\n        break;\n    }\n    \n    setFilteredProperties(sorted);\n    console.log('Properties sorted by:', sortOption);\n  };\n\n  const handlePropertyClick = (property: Property) => {\n    onPropertySelect?.(property);\n    console.log('Property selected:', property.id);\n  };\n\n  const handleFavorite = (propertyId: string) => {\n    onFavoriteToggle?.(propertyId);\n    console.log('Favorite toggled:', propertyId);\n  };\n\n  const handleContact = (propertyId: string) => {\n    onContactAgent?.(propertyId);\n    console.log('Contact agent for property:', propertyId);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold\" data-testid=\"text-properties-title\">{title}</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-properties-count\">\n            {filteredProperties.length} properties found\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          {/* Sort Dropdown */}\n          <select\n            value={sortBy}\n            onChange={(e) => handleSort(e.target.value)}\n            className=\"px-3 py-2 border rounded-md text-sm bg-background\"\n            data-testid=\"select-sort\"\n          >\n            <option value=\"newest\">Newest First</option>\n            <option value=\"price-low\">Price: Low to High</option>\n            <option value=\"price-high\">Price: High to Low</option>\n            <option value=\"bedrooms\">Most Bedrooms</option>\n            <option value=\"sqft\">Largest Size</option>\n          </select>\n          \n          {/* View Mode Toggle */}\n          <div className=\"flex border rounded-md overflow-hidden\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('grid')}\n              data-testid=\"button-grid-view\"\n            >\n              <Grid3X3 className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              data-testid=\"button-list-view\"\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {/* Search Toggle (Mobile) */}\n          {showSearch && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsSearchExpanded(!isSearchExpanded)}\n              className=\"md:hidden\"\n              data-testid=\"button-toggle-search\"\n            >\n              <Filter className=\"h-4 w-4 mr-1\" />\n              Filter\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Search Component */}\n      {showSearch && (\n        <div className={`${isSearchExpanded ? 'block' : 'hidden'} md:block`}>\n          <PropertySearch\n            onSearch={handleSearch}\n            onClearFilters={handleClearFilters}\n          />\n        </div>\n      )}\n\n      {/* Results */}\n      {filteredProperties.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-muted-foreground mb-4\">No properties found matching your criteria</div>\n          <Button variant=\"outline\" onClick={handleClearFilters} data-testid=\"button-clear-all-filters\">\n            Clear All Filters\n          </Button>\n        </div>\n      ) : (\n        <div\n          className={\n            viewMode === 'grid'\n              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'\n              : 'space-y-4'\n          }\n          data-testid=\"container-properties\"\n        >\n          {filteredProperties.map((property) => (\n            <PropertyCard\n              key={property.id}\n              property={property}\n              onFavoriteToggle={handleFavorite}\n              onViewDetails={() => handlePropertyClick(property)}\n              onContactAgent={handleContact}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Load More Button */}\n      {filteredProperties.length > 0 && (\n        <div className=\"text-center pt-8\">\n          <Button variant=\"outline\" size=\"lg\" data-testid=\"button-load-more\">\n            Load More Properties\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7364},"client/src/components/PropertySearch.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Filter, X, MapPin } from 'lucide-react';\n\nexport interface SearchFilters {\n  query: string;\n  location: string;\n  propertyType: string;\n  priceRange: [number, number];\n  bedrooms: string;\n  bathrooms: string;\n  status: string;\n}\n\ninterface PropertySearchProps {\n  onSearch?: (filters: SearchFilters) => void;\n  onClearFilters?: () => void;\n  className?: string;\n}\n\nexport default function PropertySearch({ onSearch, onClearFilters, className }: PropertySearchProps) {\n  const [filters, setFilters] = useState<SearchFilters>({\n    query: '',\n    location: '',\n    propertyType: 'any',\n    priceRange: [0, 2000000],\n    bedrooms: 'any',\n    bathrooms: 'any',\n    status: 'any',\n  });\n\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Search triggered with filters:', filters);\n    onSearch?.(filters);\n  };\n\n  const handleClearFilters = () => {\n    const clearedFilters: SearchFilters = {\n      query: '',\n      location: '',\n      propertyType: 'any',\n      priceRange: [0, 2000000],\n      bedrooms: 'any',\n      bathrooms: 'any',\n      status: 'any',\n    };\n    setFilters(clearedFilters);\n    onClearFilters?.();\n    console.log('Filters cleared');\n  };\n\n  const formatPrice = (price: number) => {\n    if (price >= 1000000) {\n      return `$${(price / 1000000).toFixed(1)}M`;\n    } else if (price >= 1000) {\n      return `$${(price / 1000).toFixed(0)}K`;\n    }\n    return `$${price.toLocaleString()}`;\n  };\n\n  const hasActiveFilters = () => {\n    return (\n      filters.query !== '' ||\n      filters.location !== '' ||\n      filters.propertyType !== 'any' ||\n      filters.priceRange[0] !== 0 ||\n      filters.priceRange[1] !== 2000000 ||\n      filters.bedrooms !== 'any' ||\n      filters.bathrooms !== 'any' ||\n      filters.status !== 'any'\n    );\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Search Properties\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            {hasActiveFilters() && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {Object.values(filters).filter(v => v !== 'any' && v !== '' && !(Array.isArray(v) && v[0] === 0 && v[1] === 2000000)).length} active\n              </Badge>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"h-4 w-4 mr-1\" />\n              {isExpanded ? 'Hide' : 'Filters'}\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <form onSubmit={handleSearch} className=\"space-y-4\">\n          {/* Main Search */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"search-query\">Search</Label>\n              <Input\n                id=\"search-query\"\n                type=\"text\"\n                placeholder=\"Property type, neighborhood...\"\n                value={filters.query}\n                onChange={(e) => setFilters(prev => ({ ...prev, query: e.target.value }))}\n                data-testid=\"input-search-query\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"search-location\">Location</Label>\n              <div className=\"relative\">\n                <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  id=\"search-location\"\n                  type=\"text\"\n                  placeholder=\"City, state, or ZIP code\"\n                  className=\"pl-10\"\n                  value={filters.location}\n                  onChange={(e) => setFilters(prev => ({ ...prev, location: e.target.value }))}\n                  data-testid=\"input-search-location\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Advanced Filters */}\n          {isExpanded && (\n            <div className=\"space-y-4 pt-4 border-t\">\n              {/* Property Type & Status */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"property-type\">Property Type</Label>\n                  <Select value={filters.propertyType} onValueChange={(value) => setFilters(prev => ({ ...prev, propertyType: value }))}>\n                    <SelectTrigger data-testid=\"select-property-type\">\n                      <SelectValue placeholder=\"Any type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"any\">Any Type</SelectItem>\n                      <SelectItem value=\"house\">House</SelectItem>\n                      <SelectItem value=\"condo\">Condo</SelectItem>\n                      <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                      <SelectItem value=\"apartment\">Apartment</SelectItem>\n                      <SelectItem value=\"land\">Land</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select value={filters.status} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}>\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Any status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"any\">Any Status</SelectItem>\n                      <SelectItem value=\"for-sale\">For Sale</SelectItem>\n                      <SelectItem value=\"for-rent\">For Rent</SelectItem>\n                      <SelectItem value=\"sold\">Sold</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Bedrooms & Bathrooms */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"bedrooms\">Bedrooms</Label>\n                  <Select value={filters.bedrooms} onValueChange={(value) => setFilters(prev => ({ ...prev, bedrooms: value }))}>\n                    <SelectTrigger data-testid=\"select-bedrooms\">\n                      <SelectValue placeholder=\"Any\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"any\">Any</SelectItem>\n                      <SelectItem value=\"1\">1+</SelectItem>\n                      <SelectItem value=\"2\">2+</SelectItem>\n                      <SelectItem value=\"3\">3+</SelectItem>\n                      <SelectItem value=\"4\">4+</SelectItem>\n                      <SelectItem value=\"5\">5+</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"bathrooms\">Bathrooms</Label>\n                  <Select value={filters.bathrooms} onValueChange={(value) => setFilters(prev => ({ ...prev, bathrooms: value }))}>\n                    <SelectTrigger data-testid=\"select-bathrooms\">\n                      <SelectValue placeholder=\"Any\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"any\">Any</SelectItem>\n                      <SelectItem value=\"1\">1+</SelectItem>\n                      <SelectItem value=\"1.5\">1.5+</SelectItem>\n                      <SelectItem value=\"2\">2+</SelectItem>\n                      <SelectItem value=\"3\">3+</SelectItem>\n                      <SelectItem value=\"4\">4+</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Price Range */}\n              <div>\n                <Label>Price Range</Label>\n                <div className=\"px-2 py-4\">\n                  <Slider\n                    value={filters.priceRange}\n                    onValueChange={(value) => setFilters(prev => ({ ...prev, priceRange: value as [number, number] }))}\n                    max={2000000}\n                    min={0}\n                    step={50000}\n                    className=\"w-full\"\n                    data-testid=\"slider-price-range\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground mt-2\">\n                    <span>{formatPrice(filters.priceRange[0])}</span>\n                    <span>{formatPrice(filters.priceRange[1])}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-search\">\n              <Search className=\"h-4 w-4 mr-2\" />\n              Search Properties\n            </Button>\n            {hasActiveFilters() && (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClearFilters}\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Clear\n              </Button>\n            )}\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10118},"client/src/components/app-sidebar.tsx":{"content":"import { Link } from \"wouter\";\nimport { Home, Building2, MessageSquare, Heart, Settings, User } from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nconst menuItems = [\n  {\n    title: \"Home\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Properties\",\n    url: \"/properties\",\n    icon: Building2,\n  },\n  {\n    title: \"Messages\",\n    url: \"/messages\", \n    icon: MessageSquare,\n  },\n  {\n    title: \"Favorites\",\n    url: \"/favorites\",\n    icon: Heart,\n  },\n];\n\nconst agentMenuItems = [\n  {\n    title: \"Manage Properties\",\n    url: \"/manage-properties\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const { user } = useAuth();\n  \n  const isAgent = user?.role === 'agent' || user?.role === 'seller';\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n            <Building2 className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"font-bold text-lg\">RealEstate</h2>\n            <p className=\"text-xs text-muted-foreground\">Marketplace</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase()}`}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {isAgent && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Agent Tools</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {agentMenuItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        {user && (\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={user.profileImageUrl || undefined} />\n              <AvatarFallback>\n                <User className=\"h-4 w-4\" />\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium truncate\">\n                {user.firstName} {user.lastName}\n              </p>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {user.role}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        )}\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":3839},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"// Replit Auth hook based on blueprint:javascript_log_in_with_replit\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":375},"client/src/lib/authUtils.ts":{"content":"// Auth utility functions based on blueprint:javascript_log_in_with_replit\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":190},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/favorites.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useSEO } from \"@/hooks/useSEO\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, Bed, Bath, Square, MapPin, Trash2, ExternalLink } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Favorite, Property } from \"@shared/schema\";\n\ninterface FavoriteWithProperty extends Favorite {\n  property: Property;\n}\n\nexport default function Favorites() {\n  const { toast } = useToast();\n\n  // SEO metadata\n  useSEO({\n    title: 'My Favorites - Saved Properties | PropertyHub',\n    description: 'View and manage your saved properties. Keep track of homes and properties you\\'re interested in buying or renting.',\n    ogTitle: 'My Favorite Properties - PropertyHub',\n    ogDescription: 'View your saved properties and manage your real estate favorites.',\n    canonical: typeof window !== 'undefined' ? window.location.origin + '/favorites' : undefined,\n    ogUrl: typeof window !== 'undefined' ? window.location.origin + '/favorites' : undefined\n  });\n\n  // Fetch user's favorites\n  const { data: favorites = [], isLoading } = useQuery({\n    queryKey: ['/api/favorites'],\n    queryFn: () => apiRequest('/api/favorites')\n  });\n\n  // Remove favorite mutation\n  const removeFavoriteMutation = useMutation({\n    mutationFn: (propertyId: string) => apiRequest(`/api/favorites/${propertyId}`, 'DELETE'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      toast({\n        title: \"Success\",\n        description: \"Property removed from favorites\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove from favorites\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleRemoveFavorite = (propertyId: string) => {\n    if (window.confirm('Are you sure you want to remove this property from your favorites?')) {\n      removeFavoriteMutation.mutate(propertyId);\n    }\n  };\n\n  const formatPrice = (price: string | number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(typeof price === 'string' ? parseFloat(price) : price);\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'for-sale': return 'default';\n      case 'for-rent': return 'secondary';\n      case 'sold': return 'destructive';\n      case 'pending': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">My Favorites</h1>\n        <p className=\"text-muted-foreground\">\n          Properties you've saved for later viewing\n        </p>\n      </div>\n\n      {/* Favorites List */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"aspect-[4/3] bg-muted\" />\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-muted rounded mb-2\" />\n                <div className=\"h-4 bg-muted rounded w-2/3\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (favorites as FavoriteWithProperty[]).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Heart className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No favorites yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start exploring properties and save your favorites for easy access later.\n            </p>\n            <Button data-testid=\"button-browse-properties\">\n              Browse Properties\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          {/* Results Count */}\n          <div className=\"mb-4\">\n            <p className=\"text-muted-foreground\">\n              {(favorites as FavoriteWithProperty[]).length} saved {(favorites as FavoriteWithProperty[]).length === 1 ? 'property' : 'properties'}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {(favorites as FavoriteWithProperty[]).map((favorite: FavoriteWithProperty) => {\n              const property = favorite.property;\n              \n              return (\n                <Card key={favorite.id} className=\"overflow-hidden hover-elevate\" data-testid={`card-favorite-${property.id}`}>\n                  {/* Property Image */}\n                  <div className=\"aspect-[4/3] bg-muted relative overflow-hidden\">\n                    {property.images && property.images.length > 0 ? (\n                      <img \n                        src={property.images[0]} \n                        alt={property.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center bg-muted\">\n                        <span className=\"text-muted-foreground\">No Image</span>\n                      </div>\n                    )}\n                    \n                    {/* Price Badge */}\n                    <div className=\"absolute top-4 left-4\">\n                      <Badge variant=\"secondary\" className=\"bg-background/90 text-foreground\">\n                        {formatPrice(property.price)}\n                      </Badge>\n                    </div>\n\n                    {/* Status Badge */}\n                    <div className=\"absolute top-4 right-4\">\n                      <Badge variant={getStatusBadgeVariant(property.status)}>\n                        {property.status.replace('-', ' ').toUpperCase()}\n                      </Badge>\n                    </div>\n\n                    {/* Favorite Heart (filled) */}\n                    <div className=\"absolute bottom-4 right-4\">\n                      <div className=\"bg-background/90 rounded-full p-2\">\n                        <Heart className=\"h-4 w-4 fill-red-500 text-red-500\" />\n                      </div>\n                    </div>\n\n                    {/* Remove Button */}\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      className=\"absolute bottom-4 left-4 bg-background/90 hover:bg-background\"\n                      onClick={() => handleRemoveFavorite(property.id)}\n                      disabled={removeFavoriteMutation.isPending}\n                      data-testid={`button-remove-${property.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </div>\n\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"font-semibold text-lg mb-2 line-clamp-1\">{property.title}</h3>\n                    \n                    {/* Property Details */}\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-3\">\n                      <div className=\"flex items-center gap-1\">\n                        <Bed className=\"h-4 w-4\" />\n                        <span>{property.bedrooms} bed</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Bath className=\"h-4 w-4\" />\n                        <span>{property.bathrooms} bath</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Square className=\"h-4 w-4\" />\n                        <span>{property.squareFootage.toLocaleString()} sqft</span>\n                      </div>\n                    </div>\n\n                    {/* Address */}\n                    <div className=\"flex items-start gap-2 text-sm text-muted-foreground mb-3\">\n                      <MapPin className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                      <span className=\"line-clamp-2\">{property.address}</span>\n                    </div>\n\n                    {/* Saved Date */}\n                    <p className=\"text-xs text-muted-foreground\">\n                      Saved {new Intl.DateTimeFormat('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                      }).format(new Date(favorite.createdAt!))}\n                    </p>\n                  </CardContent>\n\n                  <CardFooter className=\"p-4 pt-0 flex gap-2\">\n                    <Button className=\"flex-1\" data-testid={`button-view-${property.id}`}>\n                      <ExternalLink className=\"mr-2 h-4 w-4\" />\n                      View Details\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => handleRemoveFavorite(property.id)}\n                      disabled={removeFavoriteMutation.isPending}\n                      data-testid={`button-remove-footer-${property.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </CardFooter>\n                </Card>\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":9677},"client/src/pages/home.tsx":{"content":"// Home page for authenticated users\nimport { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useSEO } from '@/hooks/useSEO';\nimport type { User, Property as DbProperty } from '@shared/schema';\nimport { Property } from '../components/PropertyCard';\nimport Header from '../components/Header';\nimport HeroSection from '../components/HeroSection';\nimport PropertyGrid from '../components/PropertyGrid';\nimport PropertyDetails from '../components/PropertyDetails';\n\n// Import images\nimport familyHomeImage from '@assets/generated_images/modern_family_home_exterior_2bd95c80.png';\nimport condoImage from '@assets/generated_images/luxury_downtown_condo_building_a8a137b2.png';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function Home() {\n  const { user } = useAuth() as { user: User | undefined };\n  const [selectedProperty, setSelectedProperty] = useState<any>(null);\n\n  // SEO metadata\n  useSEO({\n    title: 'PropertyHub - Find Your Perfect Home',\n    description: 'Discover luxury properties, connect with top real estate agents, and find your dream home. Browse thousands of listings.',\n    ogTitle: 'PropertyHub - Real Estate Marketplace',\n    ogDescription: 'Find your perfect home with PropertyHub. Browse luxury properties and connect with professional agents.',\n    canonical: typeof window !== 'undefined' ? window.location.origin + '/' : undefined,\n    ogUrl: typeof window !== 'undefined' ? window.location.origin + '/' : undefined\n  });\n  \n  // Fetch featured properties from the database\n  const { data: dbProperties = [], isLoading: isLoadingProperties } = useQuery({\n    queryKey: ['/api/properties'],\n    queryFn: () => fetch('/api/properties?limit=8&sortBy=createdAt&sortOrder=desc').then(res => res.json())\n  });\n\n  // Transform database properties to match PropertyCard interface\n  const featuredProperties: Property[] = dbProperties.slice(0, 4).map((property: DbProperty) => ({\n    id: property.id,\n    title: property.title,\n    address: property.address,\n    price: parseFloat(property.price),\n    bedrooms: property.bedrooms,\n    bathrooms: parseFloat(property.bathrooms.toString()),\n    squareFootage: property.squareFootage,\n    imageUrl: (property.images && property.images.length > 0) ? property.images[0] : '',\n    status: property.status as 'for-sale' | 'for-rent' | 'sold' | 'pending',\n    agentName: 'Agent', // TODO: Fetch agent name from agentId\n    agentPhoto: undefined,\n  }));\n\n  const handleLogout = () => {\n    window.location.href = '/api/logout';\n  };\n\n  const handleHeroSearch = (query: string, location: string) => {\n    console.log('Hero search (authenticated):', { query, location });\n    // Todo: Navigate to search results\n  };\n\n  const handlePropertySelect = (property: Property) => {\n    setSelectedProperty(property);\n  };\n\n  const handleFavoriteToggle = (propertyId: string) => {\n    console.log('Favorite toggled (authenticated):', propertyId);\n    // Todo: Implement real favorite functionality\n  };\n\n  const handleContactAgent = (propertyId: string) => {\n    console.log('Contact agent for property (authenticated):', propertyId);\n    // Todo: Implement real messaging functionality\n  };\n\n  // Show property details if selected\n  if (selectedProperty) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header \n          isAuthenticated={true} \n          userRole={user?.role} \n          onAuthClick={handleLogout} \n        />\n        <PropertyDetails\n          property={selectedProperty}\n          onBack={() => setSelectedProperty(null)}\n          onContactAgent={handleContactAgent}\n          onScheduleViewing={(propertyId) => console.log('Schedule viewing:', propertyId)}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        isAuthenticated={true} \n        userRole={user?.role} \n        onAuthClick={handleLogout} \n      />\n      \n      <main>\n        <HeroSection onSearch={handleHeroSearch} />\n        \n        <section className=\"container mx-auto px-4 py-16\">\n          {isLoadingProperties ? (\n            <div className=\"text-center py-12\">\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              <p className=\"mt-4 text-muted-foreground\">Loading featured properties...</p>\n            </div>\n          ) : featuredProperties.length > 0 ? (\n            <PropertyGrid\n              properties={featuredProperties}\n              onPropertySelect={handlePropertySelect}\n              onFavoriteToggle={handleFavoriteToggle}\n              onContactAgent={handleContactAgent}\n              showSearch={false}\n              title=\"Featured Properties\"\n            />\n          ) : (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-semibold mb-2\">No Properties Yet</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Properties will appear here once agents start adding listings.\n              </p>\n            </div>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}","size_bytes":5212},"client/src/pages/landing.tsx":{"content":"// Landing page for logged-out users based on blueprint:javascript_log_in_with_replit\nimport { useSEO } from '@/hooks/useSEO';\nimport Header from '../components/Header';\nimport HeroSection from '../components/HeroSection';\nimport PropertyGrid from '../components/PropertyGrid';\nimport { Property } from '../components/PropertyCard';\n\n// Import images\nimport familyHomeImage from '@assets/generated_images/modern_family_home_exterior_2bd95c80.png';\nimport condoImage from '@assets/generated_images/luxury_downtown_condo_building_a8a137b2.png';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function Landing() {\n  // SEO metadata for landing page\n  useSEO({\n    title: 'PropertyHub - Buy, Sell, Rent Properties',\n    description: 'Discover your dream home with PropertyHub. Browse luxury properties, connect with top agents, and start your search today.',\n    ogTitle: 'PropertyHub - Real Estate Marketplace',\n    ogDescription: 'Find luxury homes, condos, and apartments. Connect with professional real estate agents.',\n    canonical: typeof window !== 'undefined' ? window.location.origin + '/' : undefined,\n    ogUrl: typeof window !== 'undefined' ? window.location.origin + '/' : undefined\n  });\n\n  // Todo: Remove mock functionality - replace with real property data\n  const featuredProperties: Property[] = [\n    {\n      id: '1',\n      title: 'Modern Family Home',\n      address: '123 Oak Street, Greenville, CA 94102',\n      price: 850000,\n      bedrooms: 4,\n      bathrooms: 3,\n      squareFootage: 2400,\n      imageUrl: familyHomeImage,\n      status: 'for-sale',\n      agentName: 'Sarah Johnson',\n      agentPhoto: agentPhoto,\n    },\n    {\n      id: '2',\n      title: 'Luxury Downtown Condo',\n      address: '456 Metropolitan Ave, Downtown, CA 94105',\n      price: 4200,\n      bedrooms: 2,\n      bathrooms: 2,\n      squareFootage: 1200,\n      imageUrl: condoImage,\n      status: 'for-rent',\n      agentName: 'Sarah Johnson',\n      agentPhoto: agentPhoto,\n    },\n    {\n      id: '3',\n      title: 'Charming Victorian',\n      address: '789 Heritage Lane, Historic District, CA 94110',\n      price: 1200000,\n      bedrooms: 3,\n      bathrooms: 2,\n      squareFootage: 1800,\n      imageUrl: familyHomeImage,\n      status: 'pending',\n      agentName: 'Sarah Johnson',\n    },\n    {\n      id: '4',\n      title: 'Contemporary Townhouse',\n      address: '321 Modern Way, Uptown, CA 94107',\n      price: 750000,\n      bedrooms: 3,\n      bathrooms: 2.5,\n      squareFootage: 1600,\n      imageUrl: condoImage,\n      status: 'for-sale',\n      agentName: 'Sarah Johnson',\n    },\n  ];\n\n  const handleLogin = () => {\n    window.location.href = '/api/login';\n  };\n\n  const handleHeroSearch = (query: string, location: string) => {\n    console.log('Hero search (guest):', { query, location });\n    // Todo: Navigate to search results or prompt to log in\n  };\n\n  const handlePropertySelect = (property: Property) => {\n    console.log('Property selected (guest):', property.id);\n    // Todo: Show limited property info or prompt to log in\n  };\n\n  const handleFavoriteToggle = (propertyId: string) => {\n    console.log('Favorite clicked (guest) - redirect to login:', propertyId);\n    handleLogin();\n  };\n\n  const handleContactAgent = (propertyId: string) => {\n    console.log('Contact agent clicked (guest) - redirect to login:', propertyId);\n    handleLogin();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        isAuthenticated={false} \n        userRole={undefined} \n        onAuthClick={handleLogin} \n      />\n      \n      <main>\n        <HeroSection onSearch={handleHeroSearch} />\n        \n        <section className=\"container mx-auto px-4 py-16\">\n          <PropertyGrid\n            properties={featuredProperties}\n            onPropertySelect={handlePropertySelect}\n            onFavoriteToggle={handleFavoriteToggle}\n            onContactAgent={handleContactAgent}\n            showSearch={false}\n            title=\"Featured Properties\"\n          />\n        </section>\n      </main>\n    </div>\n  );\n}","size_bytes":4099},"client/src/pages/manage-properties.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useSEO } from \"@/hooks/useSEO\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Bed, Bath, Square, MapPin, DollarSign } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertPropertySchema } from \"@shared/schema\";\nimport type { Property } from \"@shared/schema\";\n\nconst propertyFormSchema = insertPropertySchema.extend({\n  price: z.string().min(1, \"Price is required\"),\n  bedrooms: z.string().min(1, \"Bedrooms is required\"),\n  bathrooms: z.string().min(1, \"Bathrooms is required\"),\n  squareFootage: z.string().min(1, \"Square footage is required\"),\n  yearBuilt: z.string().optional(),\n  parkingSpaces: z.string().optional(),\n});\n\ntype PropertyFormData = z.infer<typeof propertyFormSchema>;\n\nexport default function ManageProperties() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const { toast } = useToast();\n\n  // SEO metadata\n  useSEO({\n    title: 'Manage Properties - Agent Dashboard | PropertyHub',\n    description: 'Create, edit, and manage your real estate listings. Add new properties and update existing ones.',\n    ogTitle: 'Property Management - PropertyHub',\n    ogDescription: 'Manage your real estate listings and property portfolio.',\n    canonical: typeof window !== 'undefined' ? window.location.origin + '/manage-properties' : undefined,\n    ogUrl: typeof window !== 'undefined' ? window.location.origin + '/manage-properties' : undefined\n  });\n\n  // Fetch user's properties\n  const { data: user } = useQuery({\n    queryKey: ['/api/auth/user']\n  });\n\n  const { data: properties = [], isLoading } = useQuery({\n    queryKey: ['/api/properties/agent', user?.id],\n    enabled: !!user?.id,\n    queryFn: () => apiRequest(`/api/properties/agent/${user.id}`)\n  });\n\n  // Form setup\n  const form = useForm<PropertyFormData>({\n    resolver: zodResolver(propertyFormSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      address: '',\n      price: '',\n      bedrooms: '',\n      bathrooms: '',\n      squareFootage: '',\n      lotSize: '',\n      yearBuilt: '',\n      parkingSpaces: '0',\n      propertyType: 'house',\n      status: 'for-sale',\n      images: [],\n      features: []\n    }\n  });\n\n  // Create/Update property mutation\n  const savePropertyMutation = useMutation({\n    mutationFn: async (data: PropertyFormData) => {\n      const propertyData = {\n        ...data,\n        price: parseFloat(data.price),\n        bedrooms: parseInt(data.bedrooms),\n        bathrooms: parseFloat(data.bathrooms),\n        squareFootage: parseInt(data.squareFootage),\n        yearBuilt: data.yearBuilt ? parseInt(data.yearBuilt) : undefined,\n        parkingSpaces: parseInt(data.parkingSpaces || '0'),\n      };\n\n      if (editingProperty) {\n        return apiRequest(`/api/properties/${editingProperty.id}`, {\n          method: 'PUT',\n          body: propertyData\n        });\n      } else {\n        return apiRequest('/api/properties', {\n          method: 'POST',\n          body: propertyData\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/properties/agent'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      setIsDialogOpen(false);\n      setEditingProperty(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: editingProperty ? \"Property updated successfully\" : \"Property created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save property\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete property mutation\n  const deletePropertyMutation = useMutation({\n    mutationFn: (propertyId: string) => \n      apiRequest(`/api/properties/${propertyId}`, { method: 'DELETE' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/properties/agent'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/properties'] });\n      toast({\n        title: \"Success\",\n        description: \"Property deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete property\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    form.reset({\n      title: property.title,\n      description: property.description,\n      address: property.address,\n      price: property.price.toString(),\n      bedrooms: property.bedrooms.toString(),\n      bathrooms: property.bathrooms.toString(),\n      squareFootage: property.squareFootage.toString(),\n      lotSize: property.lotSize || '',\n      yearBuilt: property.yearBuilt?.toString() || '',\n      parkingSpaces: property.parkingSpaces?.toString() || '0',\n      propertyType: property.propertyType,\n      status: property.status,\n      images: property.images || [],\n      features: property.features || []\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (propertyId: string) => {\n    if (window.confirm('Are you sure you want to delete this property?')) {\n      deletePropertyMutation.mutate(propertyId);\n    }\n  };\n\n  const handleNewProperty = () => {\n    setEditingProperty(null);\n    form.reset();\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: PropertyFormData) => {\n    savePropertyMutation.mutate(data);\n  };\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'for-sale': return 'default';\n      case 'for-rent': return 'secondary';\n      case 'sold': return 'destructive';\n      case 'pending': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  if (!user || (user.role !== 'agent' && user.role !== 'seller')) {\n    return (\n      <div className=\"container mx-auto px-4 py-12\">\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Access Restricted</h2>\n            <p className=\"text-muted-foreground\">\n              Only agents and sellers can manage properties.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">My Properties</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your property listings and track their performance\n          </p>\n        </div>\n        <Button onClick={handleNewProperty} data-testid=\"button-add-property\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Property\n        </Button>\n      </div>\n\n      {/* Properties List */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"aspect-[4/3] bg-muted\" />\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-muted rounded mb-2\" />\n                <div className=\"h-4 bg-muted rounded w-2/3\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : properties.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">No properties yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start building your portfolio by adding your first property listing.\n            </p>\n            <Button onClick={handleNewProperty}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Your First Property\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {properties.map((property: Property) => (\n            <Card key={property.id} className=\"overflow-hidden\" data-testid={`card-property-${property.id}`}>\n              {/* Property Image */}\n              <div className=\"aspect-[4/3] bg-muted relative overflow-hidden\">\n                {property.images && property.images.length > 0 ? (\n                  <img \n                    src={property.images[0]} \n                    alt={property.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center bg-muted\">\n                    <span className=\"text-muted-foreground\">No Image</span>\n                  </div>\n                )}\n                \n                {/* Status Badge */}\n                <div className=\"absolute top-4 left-4\">\n                  <Badge variant={getStatusBadgeVariant(property.status)}>\n                    {property.status.replace('-', ' ').toUpperCase()}\n                  </Badge>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"absolute top-4 right-4 flex gap-2\">\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    className=\"bg-background/90 hover:bg-background\"\n                    onClick={() => handleEdit(property)}\n                    data-testid={`button-edit-${property.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    className=\"bg-background/90 hover:bg-background text-destructive hover:text-destructive\"\n                    onClick={() => handleDelete(property.id)}\n                    disabled={deletePropertyMutation.isPending}\n                    data-testid={`button-delete-${property.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h3 className=\"font-semibold text-lg line-clamp-1\">{property.title}</h3>\n                  <div className=\"flex items-center gap-1 text-lg font-bold text-primary\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    <span>{formatPrice(property.price)}</span>\n                  </div>\n                </div>\n                \n                {/* Property Details */}\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-3\">\n                  <div className=\"flex items-center gap-1\">\n                    <Bed className=\"h-4 w-4\" />\n                    <span>{property.bedrooms}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Bath className=\"h-4 w-4\" />\n                    <span>{property.bathrooms}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Square className=\"h-4 w-4\" />\n                    <span>{property.squareFootage.toLocaleString()}</span>\n                  </div>\n                </div>\n\n                {/* Address */}\n                <div className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                  <MapPin className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                  <span className=\"line-clamp-2\">{property.address}</span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Property Form Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingProperty ? 'Edit Property' : 'Add New Property'}\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem className=\"md:col-span-2\">\n                      <FormLabel>Property Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Beautiful family home...\" {...field} data-testid=\"input-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"propertyType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Property Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-property-type\">\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"house\">House</SelectItem>\n                          <SelectItem value=\"condo\">Condo</SelectItem>\n                          <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                          <SelectItem value=\"apartment\">Apartment</SelectItem>\n                          <SelectItem value=\"land\">Land</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"for-sale\">For Sale</SelectItem>\n                          <SelectItem value=\"for-rent\">For Rent</SelectItem>\n                          <SelectItem value=\"sold\">Sold</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"123 Main St, City, State 12345\" {...field} data-testid=\"input-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe the property features, location benefits, and unique selling points...\"\n                        className=\"min-h-[100px]\"\n                        {...field} \n                        data-testid=\"textarea-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Property Details */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Price ($)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"500000\" {...field} data-testid=\"input-price\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bedrooms\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bedrooms</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"3\" {...field} data-testid=\"input-bedrooms\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"bathrooms\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bathrooms</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"2.5\" {...field} data-testid=\"input-bathrooms\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"squareFootage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sq Ft</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"2000\" {...field} data-testid=\"input-square-footage\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Additional Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"yearBuilt\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Year Built</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"2020\" {...field} data-testid=\"input-year-built\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"parkingSpaces\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Parking Spaces</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"2\" {...field} data-testid=\"input-parking-spaces\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lotSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Lot Size</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"0.25 acres\" {...field} data-testid=\"input-lot-size\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={savePropertyMutation.isPending}\n                  data-testid=\"button-save-property\"\n                >\n                  {savePropertyMutation.isPending ? 'Saving...' : (editingProperty ? 'Update Property' : 'Create Property')}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22054},"client/src/pages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useSEO } from \"@/hooks/useSEO\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Send, MessageCircle, Plus, User, Mail } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertMessageSchema } from \"@shared/schema\";\nimport type { Message, User as UserType, Property } from \"@shared/schema\";\n\nconst messageFormSchema = insertMessageSchema.omit({ senderId: true });\n\ntype MessageFormData = z.infer<typeof messageFormSchema>;\n\ninterface ConversationGroup {\n  otherUser: UserType;\n  property?: Property;\n  messages: Message[];\n  unreadCount: number;\n}\n\nexport default function Messages() {\n  const [selectedConversation, setSelectedConversation] = useState<ConversationGroup | null>(null);\n  const [isNewMessageDialogOpen, setIsNewMessageDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  // SEO metadata\n  useSEO({\n    title: 'Messages - Real Estate Communication | PropertyHub',\n    description: 'Manage your property inquiries and communicate with real estate agents about listings.',\n    ogTitle: 'Messages - PropertyHub',\n    ogDescription: 'Communicate with real estate agents about property listings.',\n    canonical: typeof window !== 'undefined' ? window.location.origin + '/messages' : undefined,\n    ogUrl: typeof window !== 'undefined' ? window.location.origin + '/messages' : undefined\n  });\n\n  // Fetch current user\n  const { data: user } = useQuery({\n    queryKey: ['/api/auth/user'],\n    queryFn: () => apiRequest('/api/auth/user')\n  });\n\n  // Fetch user's messages\n  const { data: messages = [], isLoading } = useQuery({\n    queryKey: ['/api/messages'],\n    enabled: !!user,\n    queryFn: () => apiRequest('/api/messages')\n  });\n\n  // Fetch properties for new message form\n  const { data: properties = [] } = useQuery({\n    queryKey: ['/api/properties'],\n    queryFn: () => apiRequest('/api/properties?limit=100')\n  });\n\n  // Form for new messages\n  const form = useForm<MessageFormData>({\n    resolver: zodResolver(messageFormSchema),\n    defaultValues: {\n      propertyId: '',\n      recipientId: '',\n      subject: '',\n      message: '',\n      inquiryType: 'general'\n    }\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: (data: MessageFormData) => apiRequest('/api/messages', 'POST', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/messages'] });\n      setIsNewMessageDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Message sent successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Mark message as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: (messageId: string) => apiRequest(`/api/messages/${messageId}/read`, 'PATCH'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/messages'] });\n    }\n  });\n\n  // Group messages by conversation\n  const conversations: ConversationGroup[] = [];\n  if (Array.isArray(messages)) {\n    const messageGroups = new Map<string, Message[]>();\n    \n    (messages as Message[]).forEach((message: Message) => {\n      const otherUserId = message.senderId === user?.id ? message.recipientId : message.senderId;\n      const key = `${otherUserId}-${message.propertyId || 'general'}`;\n      \n      if (!messageGroups.has(key)) {\n        messageGroups.set(key, []);\n      }\n      messageGroups.get(key)!.push(message);\n    });\n\n    // Convert to conversation groups (simplified for now)\n    messageGroups.forEach((msgs, key) => {\n      const sortedMsgs = msgs.sort((a, b) => \n        new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime()\n      );\n      const latestMsg = sortedMsgs[sortedMsgs.length - 1];\n      const otherUserId = latestMsg.senderId === user?.id ? latestMsg.recipientId : latestMsg.senderId;\n      \n      // Create mock user data (in real app, would fetch from API)\n      const otherUser: UserType = {\n        id: otherUserId,\n        email: `user${otherUserId.slice(-4)}@example.com`,\n        firstName: 'User',\n        lastName: otherUserId.slice(-4),\n        role: 'agent' as const,\n        profileImageUrl: null,\n        phone: null,\n        bio: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      const unreadCount = sortedMsgs.filter(m => \n        m.recipientId === user?.id && !m.isRead\n      ).length;\n\n      conversations.push({\n        otherUser,\n        messages: sortedMsgs,\n        unreadCount\n      });\n    });\n  }\n\n  const handleSendMessage = (data: MessageFormData) => {\n    sendMessageMutation.mutate(data);\n  };\n\n  const handleSelectConversation = (conversation: ConversationGroup) => {\n    setSelectedConversation(conversation);\n    \n    // Mark unread messages as read\n    conversation.messages\n      .filter(m => m.recipientId === user?.id && !m.isRead)\n      .forEach(m => markAsReadMutation.mutate(m.id));\n  };\n\n  const formatTimestamp = (timestamp: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(new Date(timestamp));\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6 h-[calc(100vh-120px)]\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Messages</h1>\n          <p className=\"text-muted-foreground\">\n            Communicate with agents and buyers about properties\n          </p>\n        </div>\n        <Dialog open={isNewMessageDialogOpen} onOpenChange={setIsNewMessageDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-message\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              New Message\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Send New Message</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSendMessage)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"propertyId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Property (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-property\">\n                            <SelectValue placeholder=\"Select a property\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"\">No specific property</SelectItem>\n                          {(properties as Property[]).map((property: Property) => (\n                            <SelectItem key={property.id} value={property.id}>\n                              {property.title} - {property.address}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"recipientId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Recipient ID</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter recipient user ID\" \n                          {...field} \n                          data-testid=\"input-recipient-id\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"subject\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subject</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Message subject\" \n                          {...field} \n                          data-testid=\"input-subject\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"inquiryType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Inquiry Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-inquiry-type\">\n                            <SelectValue placeholder=\"Select inquiry type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"general\">General</SelectItem>\n                          <SelectItem value=\"viewing\">Schedule Viewing</SelectItem>\n                          <SelectItem value=\"offer\">Make Offer</SelectItem>\n                          <SelectItem value=\"information\">Request Information</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Type your message here...\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                          data-testid=\"textarea-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsNewMessageDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={sendMessageMutation.isPending}\n                    data-testid=\"button-send\"\n                  >\n                    <Send className=\"mr-2 h-4 w-4\" />\n                    {sendMessageMutation.isPending ? 'Sending...' : 'Send Message'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex gap-6 h-full\">\n        {/* Conversations List */}\n        <Card className=\"w-1/3 flex flex-col\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5\" />\n              Conversations\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-1 p-0 overflow-y-auto\">\n            {isLoading ? (\n              <div className=\"p-4\">\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"flex items-center gap-3 p-3\">\n                        <div className=\"h-10 w-10 bg-muted rounded-full\" />\n                        <div className=\"flex-1\">\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-1\" />\n                          <div className=\"h-3 bg-muted rounded w-1/2\" />\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : conversations.length === 0 ? (\n              <div className=\"p-8 text-center text-muted-foreground\">\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>No conversations yet</p>\n                <p className=\"text-sm\">Start by sending a message</p>\n              </div>\n            ) : (\n              <div>\n                {conversations.map((conversation, index) => (\n                  <div\n                    key={`${conversation.otherUser.id}-${index}`}\n                    className={`p-4 border-b cursor-pointer hover-elevate ${\n                      selectedConversation === conversation ? 'bg-muted' : ''\n                    }`}\n                    onClick={() => handleSelectConversation(conversation)}\n                    data-testid={`conversation-${conversation.otherUser.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <Avatar>\n                        <AvatarImage src={conversation.otherUser.profileImageUrl || undefined} />\n                        <AvatarFallback>\n                          <User className=\"h-4 w-4\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className=\"font-medium truncate\">\n                            {conversation.otherUser.firstName} {conversation.otherUser.lastName}\n                          </h4>\n                          {conversation.unreadCount > 0 && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {conversation.unreadCount}\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground truncate\">\n                          {conversation.messages[conversation.messages.length - 1]?.subject || 'No subject'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatTimestamp(conversation.messages[conversation.messages.length - 1]?.createdAt!)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Message Thread */}\n        <Card className=\"flex-1 flex flex-col\">\n          {selectedConversation ? (\n            <>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  <Avatar>\n                    <AvatarImage src={selectedConversation.otherUser.profileImageUrl || undefined} />\n                    <AvatarFallback>\n                      <User className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3>{selectedConversation.otherUser.firstName} {selectedConversation.otherUser.lastName}</h3>\n                    <p className=\"text-sm text-muted-foreground font-normal\">\n                      {selectedConversation.otherUser.role}\n                    </p>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex-1 overflow-y-auto p-4\">\n                <div className=\"space-y-4\">\n                  {selectedConversation.messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${\n                        message.senderId === user?.id ? 'justify-end' : 'justify-start'\n                      }`}\n                      data-testid={`message-${message.id}`}\n                    >\n                      <div\n                        className={`max-w-[70%] rounded-lg p-3 ${\n                          message.senderId === user?.id\n                            ? 'bg-primary text-primary-foreground'\n                            : 'bg-muted'\n                        }`}\n                      >\n                        {message.subject && (\n                          <p className=\"font-medium text-sm mb-1\">{message.subject}</p>\n                        )}\n                        <p className=\"text-sm whitespace-pre-wrap\">{message.message}</p>\n                        <p className={`text-xs mt-2 opacity-70`}>\n                          {formatTimestamp(message.createdAt!)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </>\n          ) : (\n            <CardContent className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center text-muted-foreground\">\n                <Mail className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>Select a conversation to view messages</p>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18464},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/properties.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useSEO } from \"@/hooks/useSEO\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, Search, Filter, Bed, Bath, Square, MapPin } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Property, User } from \"@shared/schema\";\n\ninterface PropertyFilters {\n  status?: string;\n  propertyType?: string;\n  minPrice?: string;\n  maxPrice?: string;\n  minBedrooms?: string;\n  maxBedrooms?: string;\n  location?: string;\n  sortBy?: string;\n  sortOrder?: string;\n}\n\nexport default function Properties() {\n  const [filters, setFilters] = useState<PropertyFilters>({\n    status: 'for-sale',\n    sortBy: 'createdAt',\n    sortOrder: 'desc'\n  });\n  const [showFilters, setShowFilters] = useState(false);\n  const { toast } = useToast();\n\n  // SEO metadata\n  useSEO({\n    title: 'Property Search - Browse Real Estate | PropertyHub',\n    description: 'Search thousands of properties for sale and rent. Filter by price, location, bedrooms to find your perfect home.',\n    ogTitle: 'Browse Properties - PropertyHub',\n    ogDescription: 'Discover properties that match your needs. Search by location, price range, and features.',\n    ogUrl: typeof window !== 'undefined' ? window.location.origin + '/properties' : undefined,\n    canonical: typeof window !== 'undefined' ? window.location.origin + '/properties' : undefined\n  });\n\n  // Fetch properties with filters\n  const { data: properties = [], isLoading } = useQuery({\n    queryKey: ['/api/properties', filters],\n    queryFn: () => {\n      const searchParams = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value) searchParams.append(key, value);\n      });\n      return apiRequest(`/api/properties?${searchParams}`);\n    }\n  });\n\n  // Fetch current user for favorites\n  const { data: user } = useQuery({\n    queryKey: ['/api/auth/user'],\n    queryFn: () => apiRequest('/api/auth/user')\n  });\n\n  // Add/remove favorite mutation\n  const favoriteMutation = useMutation({\n    mutationFn: async ({ propertyId, action }: { propertyId: string; action: 'add' | 'remove' }) => {\n      if (action === 'add') {\n        return apiRequest('/api/favorites', 'POST', { propertyId });\n      } else {\n        return apiRequest(`/api/favorites/${propertyId}`, 'DELETE');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/favorites'] });\n      toast({\n        title: \"Success\",\n        description: \"Favorites updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update favorites\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFilterChange = (key: keyof PropertyFilters, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value || undefined\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      status: 'for-sale',\n      sortBy: 'createdAt',\n      sortOrder: 'desc'\n    });\n  };\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'for-sale': return 'default';\n      case 'for-rent': return 'secondary';\n      case 'sold': return 'destructive';\n      case 'pending': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Properties</h1>\n        <p className=\"text-muted-foreground\">\n          Find your perfect home from our extensive collection of properties\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex gap-4 mb-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by location...\"\n                value={filters.location || ''}\n                onChange={(e) => handleFilterChange('location', e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-location\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFilters(!showFilters)}\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"mr-2 h-4 w-4\" />\n              Filters\n            </Button>\n          </div>\n\n          {showFilters && (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 pt-4 border-t\">\n              <Select value={filters.propertyType || ''} onValueChange={(value) => handleFilterChange('propertyType', value)}>\n                <SelectTrigger data-testid=\"select-property-type\">\n                  <SelectValue placeholder=\"Property Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Types</SelectItem>\n                  <SelectItem value=\"house\">House</SelectItem>\n                  <SelectItem value=\"condo\">Condo</SelectItem>\n                  <SelectItem value=\"townhouse\">Townhouse</SelectItem>\n                  <SelectItem value=\"apartment\">Apartment</SelectItem>\n                  <SelectItem value=\"land\">Land</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Input\n                placeholder=\"Min Price\"\n                value={filters.minPrice || ''}\n                onChange={(e) => handleFilterChange('minPrice', e.target.value)}\n                data-testid=\"input-min-price\"\n              />\n\n              <Input\n                placeholder=\"Max Price\"\n                value={filters.maxPrice || ''}\n                onChange={(e) => handleFilterChange('maxPrice', e.target.value)}\n                data-testid=\"input-max-price\"\n              />\n\n              <Select value={filters.minBedrooms || ''} onValueChange={(value) => handleFilterChange('minBedrooms', value)}>\n                <SelectTrigger data-testid=\"select-min-bedrooms\">\n                  <SelectValue placeholder=\"Min Beds\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Any</SelectItem>\n                  <SelectItem value=\"1\">1+</SelectItem>\n                  <SelectItem value=\"2\">2+</SelectItem>\n                  <SelectItem value=\"3\">3+</SelectItem>\n                  <SelectItem value=\"4\">4+</SelectItem>\n                  <SelectItem value=\"5\">5+</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <div className=\"flex gap-2\">\n                <Select value={filters.sortBy || 'createdAt'} onValueChange={(value) => handleFilterChange('sortBy', value)}>\n                  <SelectTrigger data-testid=\"select-sort-by\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"createdAt\">Newest</SelectItem>\n                    <SelectItem value=\"price\">Price</SelectItem>\n                    <SelectItem value=\"bedrooms\">Bedrooms</SelectItem>\n                    <SelectItem value=\"squareFootage\">Size</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                  Clear\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"aspect-[4/3] bg-muted\" />\n              <CardContent className=\"p-4\">\n                <div className=\"h-4 bg-muted rounded mb-2\" />\n                <div className=\"h-4 bg-muted rounded w-2/3\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (properties as Property[]).length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">No properties found</h3>\n            <p className=\"text-muted-foreground\">Try adjusting your search criteria or filters.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {(properties as Property[]).map((property: Property) => (\n            <Card key={property.id} className=\"overflow-hidden hover-elevate\" data-testid={`card-property-${property.id}`}>\n              {/* Property Image */}\n              <div className=\"aspect-[4/3] bg-muted relative overflow-hidden\">\n                {property.images && property.images.length > 0 ? (\n                  <img \n                    src={property.images[0]} \n                    alt={property.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center bg-muted\">\n                    <span className=\"text-muted-foreground\">No Image</span>\n                  </div>\n                )}\n                \n                {/* Price Badge */}\n                <div className=\"absolute top-4 left-4\">\n                  <Badge variant=\"secondary\" className=\"bg-background/90 text-foreground\">\n                    {formatPrice(property.price)}\n                  </Badge>\n                </div>\n\n                {/* Status Badge */}\n                <div className=\"absolute top-4 right-4\">\n                  <Badge variant={getStatusBadgeVariant(property.status)}>\n                    {property.status.replace('-', ' ').toUpperCase()}\n                  </Badge>\n                </div>\n\n                {/* Favorite Button */}\n                {user && (\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    className=\"absolute bottom-4 right-4 bg-background/90 hover:bg-background\"\n                    onClick={() => favoriteMutation.mutate({ \n                      propertyId: property.id, \n                      action: 'add' // Will be determined by current favorite status\n                    })}\n                    disabled={favoriteMutation.isPending}\n                    data-testid={`button-favorite-${property.id}`}\n                  >\n                    <Heart className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold text-lg mb-2 line-clamp-1\">{property.title}</h3>\n                \n                {/* Property Details */}\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-3\">\n                  <div className=\"flex items-center gap-1\">\n                    <Bed className=\"h-4 w-4\" />\n                    <span>{property.bedrooms} bed</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Bath className=\"h-4 w-4\" />\n                    <span>{property.bathrooms} bath</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Square className=\"h-4 w-4\" />\n                    <span>{property.squareFootage.toLocaleString()} sqft</span>\n                  </div>\n                </div>\n\n                {/* Address */}\n                <div className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                  <MapPin className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n                  <span className=\"line-clamp-2\">{property.address}</span>\n                </div>\n              </CardContent>\n\n              <CardFooter className=\"p-4 pt-0\">\n                <Button className=\"w-full\" data-testid={`button-view-${property.id}`}>\n                  View Details\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Load More Button */}\n      {(properties as Property[]).length > 0 && (properties as Property[]).length % 12 === 0 && (\n        <div className=\"text-center mt-8\">\n          <Button variant=\"outline\" size=\"lg\" data-testid=\"button-load-more\">\n            Load More Properties\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13159},"client/src/components/examples/AgentProfile.tsx":{"content":"import AgentProfile, { Agent } from '../AgentProfile';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function AgentProfileExample() {\n  // Todo: Remove mock functionality - replace with real agent data\n  const sampleAgent: Agent = {\n    id: '1',\n    name: 'Sarah Johnson',\n    title: 'Senior Real Estate Agent',\n    photo: agentPhoto,\n    phone: '(555) 123-4567',\n    email: 'sarah.johnson@propertyhub.com',\n    bio: 'With over 10 years of experience in luxury real estate, Sarah specializes in helping clients find their dream homes in the greater metropolitan area. Known for her attention to detail and personalized service.',\n    rating: 4.9,\n    reviewCount: 127,\n    yearsExperience: 10,\n    propertiesSold: 245,\n    specialties: ['Luxury Homes', 'First-Time Buyers', 'Investment Properties'],\n    certifications: ['Certified Residential Specialist (CRS)', 'Graduate REALTOR Institute (GRI)'],\n  };\n\n  const handleContact = (agentId: string, method: 'phone' | 'email' | 'message') => {\n    console.log(`Contact agent ${agentId} via ${method}`);\n  };\n\n  const handleViewListings = (agentId: string) => {\n    console.log(`View listings for agent ${agentId}`);\n  };\n\n  return (\n    <div className=\"space-y-8 max-w-4xl mx-auto p-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Full Agent Profile</h3>\n        <div className=\"flex justify-center\">\n          <AgentProfile\n            agent={sampleAgent}\n            onContact={handleContact}\n            onViewListings={handleViewListings}\n            compact={false}\n          />\n        </div>\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Compact Agent Card</h3>\n        <div className=\"max-w-md\">\n          <AgentProfile\n            agent={sampleAgent}\n            onContact={handleContact}\n            onViewListings={handleViewListings}\n            compact={true}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2003},"client/src/components/examples/AuthModal.tsx":{"content":"import { useState } from 'react';\nimport AuthModal from '../AuthModal';\nimport { Button } from '@/components/ui/button';\n\nexport default function AuthModalExample() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentUser, setCurrentUser] = useState<any>(null);\n\n  const handleAuthSuccess = (user: { id: string; name: string; email: string; role: string }) => {\n    setCurrentUser(user);\n    console.log('Authentication successful:', user);\n  };\n\n  const handleSignOut = () => {\n    setCurrentUser(null);\n    console.log('User signed out');\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto p-6 space-y-4\">\n      {currentUser ? (\n        <div className=\"text-center space-y-4\">\n          <div className=\"p-4 bg-muted rounded-lg\">\n            <h3 className=\"font-semibold\">Welcome back!</h3>\n            <p className=\"text-sm text-muted-foreground\">{currentUser.name}</p>\n            <p className=\"text-xs text-muted-foreground\">{currentUser.email}</p>\n            <p className=\"text-xs text-muted-foreground capitalize\">Role: {currentUser.role}</p>\n          </div>\n          <Button onClick={handleSignOut} variant=\"outline\">\n            Sign Out\n          </Button>\n        </div>\n      ) : (\n        <div className=\"text-center space-y-4\">\n          <p className=\"text-muted-foreground\">Click below to test the authentication modal</p>\n          <Button onClick={() => setIsModalOpen(true)} data-testid=\"button-open-auth\">\n            Sign In / Sign Up\n          </Button>\n        </div>\n      )}\n\n      <AuthModal\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onAuthSuccess={handleAuthSuccess}\n      />\n    </div>\n  );\n}","size_bytes":1688},"client/src/components/examples/ContactForm.tsx":{"content":"import ContactForm, { ContactFormData } from '../ContactForm';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function ContactFormExample() {\n  const handleSubmit = (formData: ContactFormData) => {\n    console.log('Contact form submitted:', formData);\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto p-6\">\n      <ContactForm\n        propertyId=\"1\"\n        propertyTitle=\"Modern Family Home\"\n        agentName=\"Sarah Johnson\"\n        agentPhoto={agentPhoto}\n        agentPhone=\"(555) 123-4567\"\n        agentEmail=\"sarah.johnson@propertyhub.com\"\n        onSubmit={handleSubmit}\n      />\n    </div>\n  );\n}","size_bytes":675},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  const handleAuthClick = () => {\n    console.log('Auth action triggered');\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Authenticated Agent Header */}\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Authenticated Agent</h3>\n        <Header \n          isAuthenticated={true} \n          userRole=\"agent\" \n          onAuthClick={handleAuthClick} \n        />\n      </div>\n      \n      {/* Guest Header */}\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Guest User</h3>\n        <Header \n          isAuthenticated={false} \n          onAuthClick={handleAuthClick} \n        />\n      </div>\n    </div>\n  );\n}","size_bytes":720},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  const handleSearch = (query: string, location: string) => {\n    console.log('Hero search triggered:', { query, location });\n  };\n\n  return <HeroSection onSearch={handleSearch} />;\n}","size_bytes":273},"client/src/components/examples/PropertyCard.tsx":{"content":"import PropertyCard, { Property } from '../PropertyCard';\nimport familyHomeImage from '@assets/generated_images/modern_family_home_exterior_2bd95c80.png';\nimport condoImage from '@assets/generated_images/luxury_downtown_condo_building_a8a137b2.png';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function PropertyCardExample() {\n  // Todo: Remove mock functionality - replace with real property data\n  const sampleProperties: Property[] = [\n    {\n      id: '1',\n      title: 'Modern Family Home',\n      address: '123 Oak Street, Greenville, CA 94102',\n      price: 850000,\n      bedrooms: 4,\n      bathrooms: 3,\n      squareFootage: 2400,\n      imageUrl: familyHomeImage,\n      status: 'for-sale',\n      isFavorited: false,\n      agentName: 'Sarah Johnson',\n      agentPhoto: agentPhoto,\n    },\n    {\n      id: '2',\n      title: 'Luxury Downtown Condo',\n      address: '456 Metropolitan Ave, Downtown, CA 94105',\n      price: 4200,\n      bedrooms: 2,\n      bathrooms: 2,\n      squareFootage: 1200,\n      imageUrl: condoImage,\n      status: 'for-rent',\n      isFavorited: true,\n      agentName: 'Sarah Johnson',\n      agentPhoto: agentPhoto,\n    },\n    {\n      id: '3',\n      title: 'Charming Victorian',\n      address: '789 Heritage Lane, Historic District, CA 94110',\n      price: 1200000,\n      bedrooms: 3,\n      bathrooms: 2,\n      squareFootage: 1800,\n      imageUrl: familyHomeImage,\n      status: 'pending',\n      isFavorited: false,\n      agentName: 'Sarah Johnson',\n    },\n  ];\n\n  const handleFavoriteToggle = (propertyId: string) => {\n    console.log('Favorite toggled for property:', propertyId);\n  };\n\n  const handleViewDetails = (propertyId: string) => {\n    console.log('View details for property:', propertyId);\n  };\n\n  const handleContactAgent = (propertyId: string) => {\n    console.log('Contact agent for property:', propertyId);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n      {sampleProperties.map((property) => (\n        <PropertyCard\n          key={property.id}\n          property={property}\n          onFavoriteToggle={handleFavoriteToggle}\n          onViewDetails={handleViewDetails}\n          onContactAgent={handleContactAgent}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":2314},"client/src/components/examples/PropertyDetails.tsx":{"content":"import PropertyDetails from '../PropertyDetails';\nimport familyHomeImage from '@assets/generated_images/modern_family_home_exterior_2bd95c80.png';\nimport condoImage from '@assets/generated_images/luxury_downtown_condo_building_a8a137b2.png';\nimport heroImage from '@assets/generated_images/luxury_residential_building_hero_7ddcd010.png';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function PropertyDetailsExample() {\n  // Todo: Remove mock functionality - replace with real property data\n  const sampleProperty = {\n    id: '1',\n    title: 'Modern Family Home',\n    address: '123 Oak Street, Greenville, CA 94102',\n    price: 850000,\n    bedrooms: 4,\n    bathrooms: 3,\n    squareFootage: 2400,\n    imageUrl: familyHomeImage,\n    status: 'for-sale' as const,\n    isFavorited: false,\n    agentName: 'Sarah Johnson',\n    agentPhoto: agentPhoto,\n    description: 'This stunning modern family home offers the perfect blend of contemporary design and comfortable living. Located in the desirable Greenville neighborhood, this property features an open-concept layout, high-end finishes, and a beautifully landscaped yard. The gourmet kitchen boasts stainless steel appliances and granite countertops, while the master suite includes a walk-in closet and spa-like bathroom.',\n    features: [\n      'Hardwood floors throughout',\n      'Granite countertops',\n      'Stainless steel appliances',\n      'Walk-in closets',\n      'Central air conditioning',\n      'Fireplace in living room',\n      'Two-car garage',\n      'Fenced backyard',\n      'Modern lighting fixtures',\n      'Energy-efficient windows'\n    ],\n    yearBuilt: 2018,\n    lotSize: '0.25 acres',\n    parkingSpaces: 2,\n    images: [familyHomeImage, condoImage, heroImage, familyHomeImage],\n    agent: {\n      id: '1',\n      name: 'Sarah Johnson',\n      title: 'Senior Real Estate Agent',\n      photo: agentPhoto,\n      phone: '(555) 123-4567',\n      email: 'sarah.johnson@propertyhub.com',\n      bio: 'With over 10 years of experience in luxury real estate, Sarah specializes in helping clients find their dream homes in the greater metropolitan area.',\n      rating: 4.9,\n      reviewCount: 127,\n      yearsExperience: 10,\n      propertiesSold: 245,\n      specialties: ['Luxury Homes', 'First-Time Buyers', 'Investment Properties'],\n      certifications: ['Certified Residential Specialist (CRS)', 'Graduate REALTOR Institute (GRI)'],\n    },\n    neighborhood: {\n      walkScore: 75,\n      schools: [\n        { name: 'Greenville Elementary', rating: 8, distance: '0.3 miles' },\n        { name: 'Oak Middle School', rating: 9, distance: '0.8 miles' },\n        { name: 'Valley High School', rating: 7, distance: '1.2 miles' },\n      ],\n      amenities: [\n        'Whole Foods Market',\n        'Starbucks Coffee',\n        'Oak Park',\n        'Public Library',\n        'Fitness Center',\n        'Medical Center',\n        'Shopping Plaza',\n        'Restaurants & Cafes'\n      ],\n    },\n  };\n\n  const handleBack = () => {\n    console.log('Back to search triggered');\n  };\n\n  const handleContactAgent = (propertyId: string) => {\n    console.log('Contact agent for property:', propertyId);\n  };\n\n  const handleScheduleViewing = (propertyId: string) => {\n    console.log('Schedule viewing for property:', propertyId);\n  };\n\n  return (\n    <PropertyDetails\n      property={sampleProperty}\n      onBack={handleBack}\n      onContactAgent={handleContactAgent}\n      onScheduleViewing={handleScheduleViewing}\n    />\n  );\n}","size_bytes":3531},"client/src/components/examples/PropertyGrid.tsx":{"content":"import PropertyGrid from '../PropertyGrid';\nimport { Property } from '../PropertyCard';\nimport familyHomeImage from '@assets/generated_images/modern_family_home_exterior_2bd95c80.png';\nimport condoImage from '@assets/generated_images/luxury_downtown_condo_building_a8a137b2.png';\nimport agentPhoto from '@assets/generated_images/professional_agent_headshot_woman_018b07d9.png';\n\nexport default function PropertyGridExample() {\n  // Todo: Remove mock functionality - replace with real property data\n  const sampleProperties: Property[] = [\n    {\n      id: '1',\n      title: 'Modern Family Home',\n      address: '123 Oak Street, Greenville, CA 94102',\n      price: 850000,\n      bedrooms: 4,\n      bathrooms: 3,\n      squareFootage: 2400,\n      imageUrl: familyHomeImage,\n      status: 'for-sale',\n      agentName: 'Sarah Johnson',\n      agentPhoto: agentPhoto,\n    },\n    {\n      id: '2',\n      title: 'Luxury Downtown Condo',\n      address: '456 Metropolitan Ave, Downtown, CA 94105',\n      price: 4200,\n      bedrooms: 2,\n      bathrooms: 2,\n      squareFootage: 1200,\n      imageUrl: condoImage,\n      status: 'for-rent',\n      agentName: 'Sarah Johnson',\n      agentPhoto: agentPhoto,\n    },\n    {\n      id: '3',\n      title: 'Charming Victorian',\n      address: '789 Heritage Lane, Historic District, CA 94110',\n      price: 1200000,\n      bedrooms: 3,\n      bathrooms: 2,\n      squareFootage: 1800,\n      imageUrl: familyHomeImage,\n      status: 'pending',\n      agentName: 'Sarah Johnson',\n    },\n    {\n      id: '4',\n      title: 'Contemporary Townhouse',\n      address: '321 Modern Way, Uptown, CA 94107',\n      price: 750000,\n      bedrooms: 3,\n      bathrooms: 2.5,\n      squareFootage: 1600,\n      imageUrl: condoImage,\n      status: 'for-sale',\n      agentName: 'Sarah Johnson',\n    },\n    {\n      id: '5',\n      title: 'Luxury Penthouse',\n      address: '555 Sky Tower, Financial District, CA 94111',\n      price: 8500,\n      bedrooms: 3,\n      bathrooms: 3,\n      squareFootage: 2000,\n      imageUrl: condoImage,\n      status: 'for-rent',\n      agentName: 'Sarah Johnson',\n    },\n    {\n      id: '6',\n      title: 'Cozy Cottage',\n      address: '987 Garden Lane, Suburbs, CA 94123',\n      price: 650000,\n      bedrooms: 2,\n      bathrooms: 1,\n      squareFootage: 1000,\n      imageUrl: familyHomeImage,\n      status: 'sold',\n      agentName: 'Sarah Johnson',\n    },\n  ];\n\n  const handlePropertySelect = (property: Property) => {\n    console.log('Property selected:', property);\n  };\n\n  const handleFavoriteToggle = (propertyId: string) => {\n    console.log('Favorite toggled:', propertyId);\n  };\n\n  const handleContactAgent = (propertyId: string) => {\n    console.log('Contact agent for property:', propertyId);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <PropertyGrid\n        properties={sampleProperties}\n        onPropertySelect={handlePropertySelect}\n        onFavoriteToggle={handleFavoriteToggle}\n        onContactAgent={handleContactAgent}\n        title=\"Featured Properties\"\n      />\n    </div>\n  );\n}","size_bytes":3047},"client/src/components/examples/PropertySearch.tsx":{"content":"import PropertySearch, { SearchFilters } from '../PropertySearch';\n\nexport default function PropertySearchExample() {\n  const handleSearch = (filters: SearchFilters) => {\n    console.log('Search executed with filters:', filters);\n  };\n\n  const handleClearFilters = () => {\n    console.log('Filters cleared');\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6\">\n      <PropertySearch \n        onSearch={handleSearch} \n        onClearFilters={handleClearFilters}\n      />\n    </div>\n  );\n}","size_bytes":496},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/useSEO.ts":{"content":"import { useEffect } from 'react';\n\ninterface SEOProps {\n  title: string;\n  description: string;\n  ogTitle?: string;\n  ogDescription?: string;\n  ogImage?: string;\n  ogUrl?: string;\n  canonical?: string;\n}\n\n// Default social image for better social sharing (using public asset path)\nconst DEFAULT_OG_IMAGE = 'https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=1200&h=630&fit=crop&q=80';\n\nexport function useSEO({\n  title,\n  description,\n  ogTitle,\n  ogDescription,\n  ogImage,\n  ogUrl,\n  canonical\n}: SEOProps) {\n  useEffect(() => {\n    // Set document title\n    document.title = title;\n\n    // Set or update meta description\n    let metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', description);\n    } else {\n      metaDescription = document.createElement('meta');\n      metaDescription.setAttribute('name', 'description');\n      metaDescription.setAttribute('content', description);\n      document.head.appendChild(metaDescription);\n    }\n\n    // Open Graph tags\n    const ogTags = [\n      { property: 'og:title', content: ogTitle || title },\n      { property: 'og:description', content: ogDescription || description },\n      { property: 'og:type', content: 'website' },\n      { property: 'og:site_name', content: 'PropertyHub' },\n    ];\n\n    // Add image (use provided or default)\n    ogTags.push({ property: 'og:image', content: ogImage || DEFAULT_OG_IMAGE });\n\n    // Add URL if provided\n    if (ogUrl) {\n      ogTags.push({ property: 'og:url', content: ogUrl });\n    }\n\n    // Update or create Open Graph meta tags\n    ogTags.forEach(({ property, content }) => {\n      let ogTag = document.querySelector(`meta[property=\"${property}\"]`);\n      if (ogTag) {\n        ogTag.setAttribute('content', content);\n      } else {\n        ogTag = document.createElement('meta');\n        ogTag.setAttribute('property', property);\n        ogTag.setAttribute('content', content);\n        document.head.appendChild(ogTag);\n      }\n    });\n\n    // Twitter Card tags for better social sharing\n    const twitterTags = [\n      { name: 'twitter:card', content: 'summary_large_image' },\n      { name: 'twitter:title', content: ogTitle || title },\n      { name: 'twitter:description', content: ogDescription || description },\n    ];\n\n    twitterTags.push({ name: 'twitter:image', content: ogImage || DEFAULT_OG_IMAGE });\n\n    twitterTags.forEach(({ name, content }) => {\n      let twitterTag = document.querySelector(`meta[name=\"${name}\"]`);\n      if (twitterTag) {\n        twitterTag.setAttribute('content', content);\n      } else {\n        twitterTag = document.createElement('meta');\n        twitterTag.setAttribute('name', name);\n        twitterTag.setAttribute('content', content);\n        document.head.appendChild(twitterTag);\n      }\n    });\n\n    // Set canonical URL\n    if (canonical) {\n      let canonicalTag = document.querySelector('link[rel=\"canonical\"]');\n      if (canonicalTag) {\n        canonicalTag.setAttribute('href', canonical);\n      } else {\n        canonicalTag = document.createElement('link');\n        canonicalTag.setAttribute('rel', 'canonical');\n        canonicalTag.setAttribute('href', canonical);\n        document.head.appendChild(canonicalTag);\n      }\n    }\n\n  }, [title, description, ogTitle, ogDescription, ogImage, ogUrl, canonical]);\n}","size_bytes":3358}},"version":1}